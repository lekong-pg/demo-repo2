// peripheral_subsys_altera_mm_interconnect_1920_rkcqb5a.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 23.4 79

`timescale 1 ps / 1 ps
module peripheral_subsys_altera_mm_interconnect_1920_rkcqb5a (
		input  wire [22:0] pb_cpu_0_m0_address,                                      //                                        pb_cpu_0_m0.address
		output wire        pb_cpu_0_m0_waitrequest,                                  //                                                   .waitrequest
		input  wire [0:0]  pb_cpu_0_m0_burstcount,                                   //                                                   .burstcount
		input  wire [3:0]  pb_cpu_0_m0_byteenable,                                   //                                                   .byteenable
		input  wire        pb_cpu_0_m0_read,                                         //                                                   .read
		output wire [31:0] pb_cpu_0_m0_readdata,                                     //                                                   .readdata
		output wire        pb_cpu_0_m0_readdatavalid,                                //                                                   .readdatavalid
		input  wire        pb_cpu_0_m0_write,                                        //                                                   .write
		input  wire [31:0] pb_cpu_0_m0_writedata,                                    //                                                   .writedata
		input  wire        pb_cpu_0_m0_debugaccess,                                  //                                                   .debugaccess
		output wire [0:0]  sysid_control_slave_address,                              //                                sysid_control_slave.address
		input  wire [31:0] sysid_control_slave_readdata,                             //                                                   .readdata
		output wire [1:0]  led_pio_s1_address,                                       //                                         led_pio_s1.address
		output wire        led_pio_s1_write,                                         //                                                   .write
		input  wire [31:0] led_pio_s1_readdata,                                      //                                                   .readdata
		output wire [31:0] led_pio_s1_writedata,                                     //                                                   .writedata
		output wire        led_pio_s1_chipselect,                                    //                                                   .chipselect
		output wire [1:0]  dipsw_pio_s1_address,                                     //                                       dipsw_pio_s1.address
		output wire        dipsw_pio_s1_write,                                       //                                                   .write
		input  wire [31:0] dipsw_pio_s1_readdata,                                    //                                                   .readdata
		output wire [31:0] dipsw_pio_s1_writedata,                                   //                                                   .writedata
		output wire        dipsw_pio_s1_chipselect,                                  //                                                   .chipselect
		output wire [1:0]  button_pio_s1_address,                                    //                                      button_pio_s1.address
		output wire        button_pio_s1_write,                                      //                                                   .write
		input  wire [31:0] button_pio_s1_readdata,                                   //                                                   .readdata
		output wire [31:0] button_pio_s1_writedata,                                  //                                                   .writedata
		output wire        button_pio_s1_chipselect,                                 //                                                   .chipselect
		output wire [21:0] ssgdma_0_host_csr_awaddr,                                 //                                  ssgdma_0_host_csr.awaddr
		output wire [2:0]  ssgdma_0_host_csr_awprot,                                 //                                                   .awprot
		output wire        ssgdma_0_host_csr_awvalid,                                //                                                   .awvalid
		input  wire        ssgdma_0_host_csr_awready,                                //                                                   .awready
		output wire [31:0] ssgdma_0_host_csr_wdata,                                  //                                                   .wdata
		output wire [3:0]  ssgdma_0_host_csr_wstrb,                                  //                                                   .wstrb
		output wire        ssgdma_0_host_csr_wvalid,                                 //                                                   .wvalid
		input  wire        ssgdma_0_host_csr_wready,                                 //                                                   .wready
		input  wire [1:0]  ssgdma_0_host_csr_bresp,                                  //                                                   .bresp
		input  wire        ssgdma_0_host_csr_bvalid,                                 //                                                   .bvalid
		output wire        ssgdma_0_host_csr_bready,                                 //                                                   .bready
		output wire [21:0] ssgdma_0_host_csr_araddr,                                 //                                                   .araddr
		output wire [2:0]  ssgdma_0_host_csr_arprot,                                 //                                                   .arprot
		output wire        ssgdma_0_host_csr_arvalid,                                //                                                   .arvalid
		input  wire        ssgdma_0_host_csr_arready,                                //                                                   .arready
		input  wire [31:0] ssgdma_0_host_csr_rdata,                                  //                                                   .rdata
		input  wire [1:0]  ssgdma_0_host_csr_rresp,                                  //                                                   .rresp
		input  wire        ssgdma_0_host_csr_rvalid,                                 //                                                   .rvalid
		output wire        ssgdma_0_host_csr_rready,                                 //                                                   .rready
		input  wire        pb_cpu_0_reset_reset_bridge_in_reset_reset,               //               pb_cpu_0_reset_reset_bridge_in_reset.reset
		input  wire        pb_cpu_0_m0_translator_reset_reset_bridge_in_reset_reset, // pb_cpu_0_m0_translator_reset_reset_bridge_in_reset.reset
		input  wire        periph_clk_out_clk_clk                                    //                                 periph_clk_out_clk.clk
	);

	wire          pb_cpu_0_m0_translator_avalon_universal_master_0_waitrequest;   // pb_cpu_0_m0_agent:av_waitrequest -> pb_cpu_0_m0_translator:uav_waitrequest
	wire   [31:0] pb_cpu_0_m0_translator_avalon_universal_master_0_readdata;      // pb_cpu_0_m0_agent:av_readdata -> pb_cpu_0_m0_translator:uav_readdata
	wire          pb_cpu_0_m0_translator_avalon_universal_master_0_debugaccess;   // pb_cpu_0_m0_translator:uav_debugaccess -> pb_cpu_0_m0_agent:av_debugaccess
	wire   [22:0] pb_cpu_0_m0_translator_avalon_universal_master_0_address;       // pb_cpu_0_m0_translator:uav_address -> pb_cpu_0_m0_agent:av_address
	wire          pb_cpu_0_m0_translator_avalon_universal_master_0_read;          // pb_cpu_0_m0_translator:uav_read -> pb_cpu_0_m0_agent:av_read
	wire    [3:0] pb_cpu_0_m0_translator_avalon_universal_master_0_byteenable;    // pb_cpu_0_m0_translator:uav_byteenable -> pb_cpu_0_m0_agent:av_byteenable
	wire          pb_cpu_0_m0_translator_avalon_universal_master_0_readdatavalid; // pb_cpu_0_m0_agent:av_readdatavalid -> pb_cpu_0_m0_translator:uav_readdatavalid
	wire          pb_cpu_0_m0_translator_avalon_universal_master_0_lock;          // pb_cpu_0_m0_translator:uav_lock -> pb_cpu_0_m0_agent:av_lock
	wire          pb_cpu_0_m0_translator_avalon_universal_master_0_write;         // pb_cpu_0_m0_translator:uav_write -> pb_cpu_0_m0_agent:av_write
	wire   [31:0] pb_cpu_0_m0_translator_avalon_universal_master_0_writedata;     // pb_cpu_0_m0_translator:uav_writedata -> pb_cpu_0_m0_agent:av_writedata
	wire    [2:0] pb_cpu_0_m0_translator_avalon_universal_master_0_burstcount;    // pb_cpu_0_m0_translator:uav_burstcount -> pb_cpu_0_m0_agent:av_burstcount
	wire          cmd_mux_src_valid;                                              // cmd_mux:src_valid -> ssgdma_0_host_csr_agent:write_cp_valid
	wire  [118:0] cmd_mux_src_data;                                               // cmd_mux:src_data -> ssgdma_0_host_csr_agent:write_cp_data
	wire          cmd_mux_src_ready;                                              // ssgdma_0_host_csr_agent:write_cp_ready -> cmd_mux:src_ready
	wire    [5:0] cmd_mux_src_channel;                                            // cmd_mux:src_channel -> ssgdma_0_host_csr_agent:write_cp_channel
	wire          cmd_mux_src_startofpacket;                                      // cmd_mux:src_startofpacket -> ssgdma_0_host_csr_agent:write_cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                        // cmd_mux:src_endofpacket -> ssgdma_0_host_csr_agent:write_cp_endofpacket
	wire          cmd_mux_001_src_valid;                                          // cmd_mux_001:src_valid -> ssgdma_0_host_csr_agent:read_cp_valid
	wire  [118:0] cmd_mux_001_src_data;                                           // cmd_mux_001:src_data -> ssgdma_0_host_csr_agent:read_cp_data
	wire          cmd_mux_001_src_ready;                                          // ssgdma_0_host_csr_agent:read_cp_ready -> cmd_mux_001:src_ready
	wire    [5:0] cmd_mux_001_src_channel;                                        // cmd_mux_001:src_channel -> ssgdma_0_host_csr_agent:read_cp_channel
	wire          cmd_mux_001_src_startofpacket;                                  // cmd_mux_001:src_startofpacket -> ssgdma_0_host_csr_agent:read_cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                    // cmd_mux_001:src_endofpacket -> ssgdma_0_host_csr_agent:read_cp_endofpacket
	wire   [31:0] sysid_control_slave_agent_m0_readdata;                          // sysid_control_slave_translator:uav_readdata -> sysid_control_slave_agent:m0_readdata
	wire          sysid_control_slave_agent_m0_waitrequest;                       // sysid_control_slave_translator:uav_waitrequest -> sysid_control_slave_agent:m0_waitrequest
	wire          sysid_control_slave_agent_m0_debugaccess;                       // sysid_control_slave_agent:m0_debugaccess -> sysid_control_slave_translator:uav_debugaccess
	wire   [22:0] sysid_control_slave_agent_m0_address;                           // sysid_control_slave_agent:m0_address -> sysid_control_slave_translator:uav_address
	wire    [3:0] sysid_control_slave_agent_m0_byteenable;                        // sysid_control_slave_agent:m0_byteenable -> sysid_control_slave_translator:uav_byteenable
	wire          sysid_control_slave_agent_m0_read;                              // sysid_control_slave_agent:m0_read -> sysid_control_slave_translator:uav_read
	wire          sysid_control_slave_agent_m0_readdatavalid;                     // sysid_control_slave_translator:uav_readdatavalid -> sysid_control_slave_agent:m0_readdatavalid
	wire          sysid_control_slave_agent_m0_lock;                              // sysid_control_slave_agent:m0_lock -> sysid_control_slave_translator:uav_lock
	wire   [31:0] sysid_control_slave_agent_m0_writedata;                         // sysid_control_slave_agent:m0_writedata -> sysid_control_slave_translator:uav_writedata
	wire          sysid_control_slave_agent_m0_write;                             // sysid_control_slave_agent:m0_write -> sysid_control_slave_translator:uav_write
	wire    [2:0] sysid_control_slave_agent_m0_burstcount;                        // sysid_control_slave_agent:m0_burstcount -> sysid_control_slave_translator:uav_burstcount
	wire          sysid_control_slave_agent_rf_source_valid;                      // sysid_control_slave_agent:rf_source_valid -> sysid_control_slave_agent_rsp_fifo:in_valid
	wire  [119:0] sysid_control_slave_agent_rf_source_data;                       // sysid_control_slave_agent:rf_source_data -> sysid_control_slave_agent_rsp_fifo:in_data
	wire          sysid_control_slave_agent_rf_source_ready;                      // sysid_control_slave_agent_rsp_fifo:in_ready -> sysid_control_slave_agent:rf_source_ready
	wire          sysid_control_slave_agent_rf_source_startofpacket;              // sysid_control_slave_agent:rf_source_startofpacket -> sysid_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_control_slave_agent_rf_source_endofpacket;                // sysid_control_slave_agent:rf_source_endofpacket -> sysid_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_valid;                   // sysid_control_slave_agent_rsp_fifo:out_valid -> sysid_control_slave_agent:rf_sink_valid
	wire  [119:0] sysid_control_slave_agent_rsp_fifo_out_data;                    // sysid_control_slave_agent_rsp_fifo:out_data -> sysid_control_slave_agent:rf_sink_data
	wire          sysid_control_slave_agent_rsp_fifo_out_ready;                   // sysid_control_slave_agent:rf_sink_ready -> sysid_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_control_slave_agent_rsp_fifo_out_startofpacket;           // sysid_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_control_slave_agent:rf_sink_startofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_endofpacket;             // sysid_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_control_slave_agent:rf_sink_endofpacket
	wire          sysid_control_slave_agent_rdata_fifo_src_valid;                 // sysid_control_slave_agent:rdata_fifo_src_valid -> sysid_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] sysid_control_slave_agent_rdata_fifo_src_data;                  // sysid_control_slave_agent:rdata_fifo_src_data -> sysid_control_slave_agent:rdata_fifo_sink_data
	wire          sysid_control_slave_agent_rdata_fifo_src_ready;                 // sysid_control_slave_agent:rdata_fifo_sink_ready -> sysid_control_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_002_src_valid;                                          // cmd_mux_002:src_valid -> sysid_control_slave_agent:cp_valid
	wire  [118:0] cmd_mux_002_src_data;                                           // cmd_mux_002:src_data -> sysid_control_slave_agent:cp_data
	wire          cmd_mux_002_src_ready;                                          // sysid_control_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire    [5:0] cmd_mux_002_src_channel;                                        // cmd_mux_002:src_channel -> sysid_control_slave_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                  // cmd_mux_002:src_startofpacket -> sysid_control_slave_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                    // cmd_mux_002:src_endofpacket -> sysid_control_slave_agent:cp_endofpacket
	wire   [31:0] led_pio_s1_agent_m0_readdata;                                   // led_pio_s1_translator:uav_readdata -> led_pio_s1_agent:m0_readdata
	wire          led_pio_s1_agent_m0_waitrequest;                                // led_pio_s1_translator:uav_waitrequest -> led_pio_s1_agent:m0_waitrequest
	wire          led_pio_s1_agent_m0_debugaccess;                                // led_pio_s1_agent:m0_debugaccess -> led_pio_s1_translator:uav_debugaccess
	wire   [22:0] led_pio_s1_agent_m0_address;                                    // led_pio_s1_agent:m0_address -> led_pio_s1_translator:uav_address
	wire    [3:0] led_pio_s1_agent_m0_byteenable;                                 // led_pio_s1_agent:m0_byteenable -> led_pio_s1_translator:uav_byteenable
	wire          led_pio_s1_agent_m0_read;                                       // led_pio_s1_agent:m0_read -> led_pio_s1_translator:uav_read
	wire          led_pio_s1_agent_m0_readdatavalid;                              // led_pio_s1_translator:uav_readdatavalid -> led_pio_s1_agent:m0_readdatavalid
	wire          led_pio_s1_agent_m0_lock;                                       // led_pio_s1_agent:m0_lock -> led_pio_s1_translator:uav_lock
	wire   [31:0] led_pio_s1_agent_m0_writedata;                                  // led_pio_s1_agent:m0_writedata -> led_pio_s1_translator:uav_writedata
	wire          led_pio_s1_agent_m0_write;                                      // led_pio_s1_agent:m0_write -> led_pio_s1_translator:uav_write
	wire    [2:0] led_pio_s1_agent_m0_burstcount;                                 // led_pio_s1_agent:m0_burstcount -> led_pio_s1_translator:uav_burstcount
	wire          led_pio_s1_agent_rf_source_valid;                               // led_pio_s1_agent:rf_source_valid -> led_pio_s1_agent_rsp_fifo:in_valid
	wire  [119:0] led_pio_s1_agent_rf_source_data;                                // led_pio_s1_agent:rf_source_data -> led_pio_s1_agent_rsp_fifo:in_data
	wire          led_pio_s1_agent_rf_source_ready;                               // led_pio_s1_agent_rsp_fifo:in_ready -> led_pio_s1_agent:rf_source_ready
	wire          led_pio_s1_agent_rf_source_startofpacket;                       // led_pio_s1_agent:rf_source_startofpacket -> led_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          led_pio_s1_agent_rf_source_endofpacket;                         // led_pio_s1_agent:rf_source_endofpacket -> led_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          led_pio_s1_agent_rsp_fifo_out_valid;                            // led_pio_s1_agent_rsp_fifo:out_valid -> led_pio_s1_agent:rf_sink_valid
	wire  [119:0] led_pio_s1_agent_rsp_fifo_out_data;                             // led_pio_s1_agent_rsp_fifo:out_data -> led_pio_s1_agent:rf_sink_data
	wire          led_pio_s1_agent_rsp_fifo_out_ready;                            // led_pio_s1_agent:rf_sink_ready -> led_pio_s1_agent_rsp_fifo:out_ready
	wire          led_pio_s1_agent_rsp_fifo_out_startofpacket;                    // led_pio_s1_agent_rsp_fifo:out_startofpacket -> led_pio_s1_agent:rf_sink_startofpacket
	wire          led_pio_s1_agent_rsp_fifo_out_endofpacket;                      // led_pio_s1_agent_rsp_fifo:out_endofpacket -> led_pio_s1_agent:rf_sink_endofpacket
	wire          led_pio_s1_agent_rdata_fifo_src_valid;                          // led_pio_s1_agent:rdata_fifo_src_valid -> led_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] led_pio_s1_agent_rdata_fifo_src_data;                           // led_pio_s1_agent:rdata_fifo_src_data -> led_pio_s1_agent:rdata_fifo_sink_data
	wire          led_pio_s1_agent_rdata_fifo_src_ready;                          // led_pio_s1_agent:rdata_fifo_sink_ready -> led_pio_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_003_src_valid;                                          // cmd_mux_003:src_valid -> led_pio_s1_agent:cp_valid
	wire  [118:0] cmd_mux_003_src_data;                                           // cmd_mux_003:src_data -> led_pio_s1_agent:cp_data
	wire          cmd_mux_003_src_ready;                                          // led_pio_s1_agent:cp_ready -> cmd_mux_003:src_ready
	wire    [5:0] cmd_mux_003_src_channel;                                        // cmd_mux_003:src_channel -> led_pio_s1_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                  // cmd_mux_003:src_startofpacket -> led_pio_s1_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                    // cmd_mux_003:src_endofpacket -> led_pio_s1_agent:cp_endofpacket
	wire   [31:0] dipsw_pio_s1_agent_m0_readdata;                                 // dipsw_pio_s1_translator:uav_readdata -> dipsw_pio_s1_agent:m0_readdata
	wire          dipsw_pio_s1_agent_m0_waitrequest;                              // dipsw_pio_s1_translator:uav_waitrequest -> dipsw_pio_s1_agent:m0_waitrequest
	wire          dipsw_pio_s1_agent_m0_debugaccess;                              // dipsw_pio_s1_agent:m0_debugaccess -> dipsw_pio_s1_translator:uav_debugaccess
	wire   [22:0] dipsw_pio_s1_agent_m0_address;                                  // dipsw_pio_s1_agent:m0_address -> dipsw_pio_s1_translator:uav_address
	wire    [3:0] dipsw_pio_s1_agent_m0_byteenable;                               // dipsw_pio_s1_agent:m0_byteenable -> dipsw_pio_s1_translator:uav_byteenable
	wire          dipsw_pio_s1_agent_m0_read;                                     // dipsw_pio_s1_agent:m0_read -> dipsw_pio_s1_translator:uav_read
	wire          dipsw_pio_s1_agent_m0_readdatavalid;                            // dipsw_pio_s1_translator:uav_readdatavalid -> dipsw_pio_s1_agent:m0_readdatavalid
	wire          dipsw_pio_s1_agent_m0_lock;                                     // dipsw_pio_s1_agent:m0_lock -> dipsw_pio_s1_translator:uav_lock
	wire   [31:0] dipsw_pio_s1_agent_m0_writedata;                                // dipsw_pio_s1_agent:m0_writedata -> dipsw_pio_s1_translator:uav_writedata
	wire          dipsw_pio_s1_agent_m0_write;                                    // dipsw_pio_s1_agent:m0_write -> dipsw_pio_s1_translator:uav_write
	wire    [2:0] dipsw_pio_s1_agent_m0_burstcount;                               // dipsw_pio_s1_agent:m0_burstcount -> dipsw_pio_s1_translator:uav_burstcount
	wire          dipsw_pio_s1_agent_rf_source_valid;                             // dipsw_pio_s1_agent:rf_source_valid -> dipsw_pio_s1_agent_rsp_fifo:in_valid
	wire  [119:0] dipsw_pio_s1_agent_rf_source_data;                              // dipsw_pio_s1_agent:rf_source_data -> dipsw_pio_s1_agent_rsp_fifo:in_data
	wire          dipsw_pio_s1_agent_rf_source_ready;                             // dipsw_pio_s1_agent_rsp_fifo:in_ready -> dipsw_pio_s1_agent:rf_source_ready
	wire          dipsw_pio_s1_agent_rf_source_startofpacket;                     // dipsw_pio_s1_agent:rf_source_startofpacket -> dipsw_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          dipsw_pio_s1_agent_rf_source_endofpacket;                       // dipsw_pio_s1_agent:rf_source_endofpacket -> dipsw_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          dipsw_pio_s1_agent_rsp_fifo_out_valid;                          // dipsw_pio_s1_agent_rsp_fifo:out_valid -> dipsw_pio_s1_agent:rf_sink_valid
	wire  [119:0] dipsw_pio_s1_agent_rsp_fifo_out_data;                           // dipsw_pio_s1_agent_rsp_fifo:out_data -> dipsw_pio_s1_agent:rf_sink_data
	wire          dipsw_pio_s1_agent_rsp_fifo_out_ready;                          // dipsw_pio_s1_agent:rf_sink_ready -> dipsw_pio_s1_agent_rsp_fifo:out_ready
	wire          dipsw_pio_s1_agent_rsp_fifo_out_startofpacket;                  // dipsw_pio_s1_agent_rsp_fifo:out_startofpacket -> dipsw_pio_s1_agent:rf_sink_startofpacket
	wire          dipsw_pio_s1_agent_rsp_fifo_out_endofpacket;                    // dipsw_pio_s1_agent_rsp_fifo:out_endofpacket -> dipsw_pio_s1_agent:rf_sink_endofpacket
	wire          dipsw_pio_s1_agent_rdata_fifo_src_valid;                        // dipsw_pio_s1_agent:rdata_fifo_src_valid -> dipsw_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] dipsw_pio_s1_agent_rdata_fifo_src_data;                         // dipsw_pio_s1_agent:rdata_fifo_src_data -> dipsw_pio_s1_agent:rdata_fifo_sink_data
	wire          dipsw_pio_s1_agent_rdata_fifo_src_ready;                        // dipsw_pio_s1_agent:rdata_fifo_sink_ready -> dipsw_pio_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_004_src_valid;                                          // cmd_mux_004:src_valid -> dipsw_pio_s1_agent:cp_valid
	wire  [118:0] cmd_mux_004_src_data;                                           // cmd_mux_004:src_data -> dipsw_pio_s1_agent:cp_data
	wire          cmd_mux_004_src_ready;                                          // dipsw_pio_s1_agent:cp_ready -> cmd_mux_004:src_ready
	wire    [5:0] cmd_mux_004_src_channel;                                        // cmd_mux_004:src_channel -> dipsw_pio_s1_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                  // cmd_mux_004:src_startofpacket -> dipsw_pio_s1_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                    // cmd_mux_004:src_endofpacket -> dipsw_pio_s1_agent:cp_endofpacket
	wire   [31:0] button_pio_s1_agent_m0_readdata;                                // button_pio_s1_translator:uav_readdata -> button_pio_s1_agent:m0_readdata
	wire          button_pio_s1_agent_m0_waitrequest;                             // button_pio_s1_translator:uav_waitrequest -> button_pio_s1_agent:m0_waitrequest
	wire          button_pio_s1_agent_m0_debugaccess;                             // button_pio_s1_agent:m0_debugaccess -> button_pio_s1_translator:uav_debugaccess
	wire   [22:0] button_pio_s1_agent_m0_address;                                 // button_pio_s1_agent:m0_address -> button_pio_s1_translator:uav_address
	wire    [3:0] button_pio_s1_agent_m0_byteenable;                              // button_pio_s1_agent:m0_byteenable -> button_pio_s1_translator:uav_byteenable
	wire          button_pio_s1_agent_m0_read;                                    // button_pio_s1_agent:m0_read -> button_pio_s1_translator:uav_read
	wire          button_pio_s1_agent_m0_readdatavalid;                           // button_pio_s1_translator:uav_readdatavalid -> button_pio_s1_agent:m0_readdatavalid
	wire          button_pio_s1_agent_m0_lock;                                    // button_pio_s1_agent:m0_lock -> button_pio_s1_translator:uav_lock
	wire   [31:0] button_pio_s1_agent_m0_writedata;                               // button_pio_s1_agent:m0_writedata -> button_pio_s1_translator:uav_writedata
	wire          button_pio_s1_agent_m0_write;                                   // button_pio_s1_agent:m0_write -> button_pio_s1_translator:uav_write
	wire    [2:0] button_pio_s1_agent_m0_burstcount;                              // button_pio_s1_agent:m0_burstcount -> button_pio_s1_translator:uav_burstcount
	wire          button_pio_s1_agent_rf_source_valid;                            // button_pio_s1_agent:rf_source_valid -> button_pio_s1_agent_rsp_fifo:in_valid
	wire  [119:0] button_pio_s1_agent_rf_source_data;                             // button_pio_s1_agent:rf_source_data -> button_pio_s1_agent_rsp_fifo:in_data
	wire          button_pio_s1_agent_rf_source_ready;                            // button_pio_s1_agent_rsp_fifo:in_ready -> button_pio_s1_agent:rf_source_ready
	wire          button_pio_s1_agent_rf_source_startofpacket;                    // button_pio_s1_agent:rf_source_startofpacket -> button_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          button_pio_s1_agent_rf_source_endofpacket;                      // button_pio_s1_agent:rf_source_endofpacket -> button_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          button_pio_s1_agent_rsp_fifo_out_valid;                         // button_pio_s1_agent_rsp_fifo:out_valid -> button_pio_s1_agent:rf_sink_valid
	wire  [119:0] button_pio_s1_agent_rsp_fifo_out_data;                          // button_pio_s1_agent_rsp_fifo:out_data -> button_pio_s1_agent:rf_sink_data
	wire          button_pio_s1_agent_rsp_fifo_out_ready;                         // button_pio_s1_agent:rf_sink_ready -> button_pio_s1_agent_rsp_fifo:out_ready
	wire          button_pio_s1_agent_rsp_fifo_out_startofpacket;                 // button_pio_s1_agent_rsp_fifo:out_startofpacket -> button_pio_s1_agent:rf_sink_startofpacket
	wire          button_pio_s1_agent_rsp_fifo_out_endofpacket;                   // button_pio_s1_agent_rsp_fifo:out_endofpacket -> button_pio_s1_agent:rf_sink_endofpacket
	wire          button_pio_s1_agent_rdata_fifo_src_valid;                       // button_pio_s1_agent:rdata_fifo_src_valid -> button_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] button_pio_s1_agent_rdata_fifo_src_data;                        // button_pio_s1_agent:rdata_fifo_src_data -> button_pio_s1_agent:rdata_fifo_sink_data
	wire          button_pio_s1_agent_rdata_fifo_src_ready;                       // button_pio_s1_agent:rdata_fifo_sink_ready -> button_pio_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_005_src_valid;                                          // cmd_mux_005:src_valid -> button_pio_s1_agent:cp_valid
	wire  [118:0] cmd_mux_005_src_data;                                           // cmd_mux_005:src_data -> button_pio_s1_agent:cp_data
	wire          cmd_mux_005_src_ready;                                          // button_pio_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire    [5:0] cmd_mux_005_src_channel;                                        // cmd_mux_005:src_channel -> button_pio_s1_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                  // cmd_mux_005:src_startofpacket -> button_pio_s1_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                    // cmd_mux_005:src_endofpacket -> button_pio_s1_agent:cp_endofpacket
	wire          pb_cpu_0_m0_agent_cp_valid;                                     // pb_cpu_0_m0_agent:cp_valid -> router:sink_valid
	wire  [118:0] pb_cpu_0_m0_agent_cp_data;                                      // pb_cpu_0_m0_agent:cp_data -> router:sink_data
	wire          pb_cpu_0_m0_agent_cp_ready;                                     // router:sink_ready -> pb_cpu_0_m0_agent:cp_ready
	wire          pb_cpu_0_m0_agent_cp_startofpacket;                             // pb_cpu_0_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          pb_cpu_0_m0_agent_cp_endofpacket;                               // pb_cpu_0_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          ssgdma_0_host_csr_agent_write_rp_valid;                         // ssgdma_0_host_csr_agent:write_rp_valid -> router_001:sink_valid
	wire  [118:0] ssgdma_0_host_csr_agent_write_rp_data;                          // ssgdma_0_host_csr_agent:write_rp_data -> router_001:sink_data
	wire          ssgdma_0_host_csr_agent_write_rp_ready;                         // router_001:sink_ready -> ssgdma_0_host_csr_agent:write_rp_ready
	wire          ssgdma_0_host_csr_agent_write_rp_startofpacket;                 // ssgdma_0_host_csr_agent:write_rp_startofpacket -> router_001:sink_startofpacket
	wire          ssgdma_0_host_csr_agent_write_rp_endofpacket;                   // ssgdma_0_host_csr_agent:write_rp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                           // router_001:src_valid -> rsp_demux:sink_valid
	wire  [118:0] router_001_src_data;                                            // router_001:src_data -> rsp_demux:sink_data
	wire          router_001_src_ready;                                           // rsp_demux:sink_ready -> router_001:src_ready
	wire    [5:0] router_001_src_channel;                                         // router_001:src_channel -> rsp_demux:sink_channel
	wire          router_001_src_startofpacket;                                   // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_001_src_endofpacket;                                     // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          ssgdma_0_host_csr_agent_read_rp_valid;                          // ssgdma_0_host_csr_agent:read_rp_valid -> router_002:sink_valid
	wire  [118:0] ssgdma_0_host_csr_agent_read_rp_data;                           // ssgdma_0_host_csr_agent:read_rp_data -> router_002:sink_data
	wire          ssgdma_0_host_csr_agent_read_rp_ready;                          // router_002:sink_ready -> ssgdma_0_host_csr_agent:read_rp_ready
	wire          ssgdma_0_host_csr_agent_read_rp_startofpacket;                  // ssgdma_0_host_csr_agent:read_rp_startofpacket -> router_002:sink_startofpacket
	wire          ssgdma_0_host_csr_agent_read_rp_endofpacket;                    // ssgdma_0_host_csr_agent:read_rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                           // router_002:src_valid -> rsp_demux_001:sink_valid
	wire  [118:0] router_002_src_data;                                            // router_002:src_data -> rsp_demux_001:sink_data
	wire          router_002_src_ready;                                           // rsp_demux_001:sink_ready -> router_002:src_ready
	wire    [5:0] router_002_src_channel;                                         // router_002:src_channel -> rsp_demux_001:sink_channel
	wire          router_002_src_startofpacket;                                   // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_002_src_endofpacket;                                     // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          sysid_control_slave_agent_rp_valid;                             // sysid_control_slave_agent:rp_valid -> router_003:sink_valid
	wire  [118:0] sysid_control_slave_agent_rp_data;                              // sysid_control_slave_agent:rp_data -> router_003:sink_data
	wire          sysid_control_slave_agent_rp_ready;                             // router_003:sink_ready -> sysid_control_slave_agent:rp_ready
	wire          sysid_control_slave_agent_rp_startofpacket;                     // sysid_control_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          sysid_control_slave_agent_rp_endofpacket;                       // sysid_control_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                           // router_003:src_valid -> rsp_demux_002:sink_valid
	wire  [118:0] router_003_src_data;                                            // router_003:src_data -> rsp_demux_002:sink_data
	wire          router_003_src_ready;                                           // rsp_demux_002:sink_ready -> router_003:src_ready
	wire    [5:0] router_003_src_channel;                                         // router_003:src_channel -> rsp_demux_002:sink_channel
	wire          router_003_src_startofpacket;                                   // router_003:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_003_src_endofpacket;                                     // router_003:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          led_pio_s1_agent_rp_valid;                                      // led_pio_s1_agent:rp_valid -> router_004:sink_valid
	wire  [118:0] led_pio_s1_agent_rp_data;                                       // led_pio_s1_agent:rp_data -> router_004:sink_data
	wire          led_pio_s1_agent_rp_ready;                                      // router_004:sink_ready -> led_pio_s1_agent:rp_ready
	wire          led_pio_s1_agent_rp_startofpacket;                              // led_pio_s1_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          led_pio_s1_agent_rp_endofpacket;                                // led_pio_s1_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                           // router_004:src_valid -> rsp_demux_003:sink_valid
	wire  [118:0] router_004_src_data;                                            // router_004:src_data -> rsp_demux_003:sink_data
	wire          router_004_src_ready;                                           // rsp_demux_003:sink_ready -> router_004:src_ready
	wire    [5:0] router_004_src_channel;                                         // router_004:src_channel -> rsp_demux_003:sink_channel
	wire          router_004_src_startofpacket;                                   // router_004:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_004_src_endofpacket;                                     // router_004:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          dipsw_pio_s1_agent_rp_valid;                                    // dipsw_pio_s1_agent:rp_valid -> router_005:sink_valid
	wire  [118:0] dipsw_pio_s1_agent_rp_data;                                     // dipsw_pio_s1_agent:rp_data -> router_005:sink_data
	wire          dipsw_pio_s1_agent_rp_ready;                                    // router_005:sink_ready -> dipsw_pio_s1_agent:rp_ready
	wire          dipsw_pio_s1_agent_rp_startofpacket;                            // dipsw_pio_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          dipsw_pio_s1_agent_rp_endofpacket;                              // dipsw_pio_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                           // router_005:src_valid -> rsp_demux_004:sink_valid
	wire  [118:0] router_005_src_data;                                            // router_005:src_data -> rsp_demux_004:sink_data
	wire          router_005_src_ready;                                           // rsp_demux_004:sink_ready -> router_005:src_ready
	wire    [5:0] router_005_src_channel;                                         // router_005:src_channel -> rsp_demux_004:sink_channel
	wire          router_005_src_startofpacket;                                   // router_005:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_005_src_endofpacket;                                     // router_005:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          button_pio_s1_agent_rp_valid;                                   // button_pio_s1_agent:rp_valid -> router_006:sink_valid
	wire  [118:0] button_pio_s1_agent_rp_data;                                    // button_pio_s1_agent:rp_data -> router_006:sink_data
	wire          button_pio_s1_agent_rp_ready;                                   // router_006:sink_ready -> button_pio_s1_agent:rp_ready
	wire          button_pio_s1_agent_rp_startofpacket;                           // button_pio_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          button_pio_s1_agent_rp_endofpacket;                             // button_pio_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                           // router_006:src_valid -> rsp_demux_005:sink_valid
	wire  [118:0] router_006_src_data;                                            // router_006:src_data -> rsp_demux_005:sink_data
	wire          router_006_src_ready;                                           // rsp_demux_005:sink_ready -> router_006:src_ready
	wire    [5:0] router_006_src_channel;                                         // router_006:src_channel -> rsp_demux_005:sink_channel
	wire          router_006_src_startofpacket;                                   // router_006:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_006_src_endofpacket;                                     // router_006:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          router_src_valid;                                               // router:src_valid -> pb_cpu_0_m0_limiter:cmd_sink_valid
	wire  [118:0] router_src_data;                                                // router:src_data -> pb_cpu_0_m0_limiter:cmd_sink_data
	wire          router_src_ready;                                               // pb_cpu_0_m0_limiter:cmd_sink_ready -> router:src_ready
	wire    [5:0] router_src_channel;                                             // router:src_channel -> pb_cpu_0_m0_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                       // router:src_startofpacket -> pb_cpu_0_m0_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                         // router:src_endofpacket -> pb_cpu_0_m0_limiter:cmd_sink_endofpacket
	wire  [118:0] pb_cpu_0_m0_limiter_cmd_src_data;                               // pb_cpu_0_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          pb_cpu_0_m0_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> pb_cpu_0_m0_limiter:cmd_src_ready
	wire    [5:0] pb_cpu_0_m0_limiter_cmd_src_channel;                            // pb_cpu_0_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          pb_cpu_0_m0_limiter_cmd_src_startofpacket;                      // pb_cpu_0_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          pb_cpu_0_m0_limiter_cmd_src_endofpacket;                        // pb_cpu_0_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                              // rsp_mux:src_valid -> pb_cpu_0_m0_limiter:rsp_sink_valid
	wire  [118:0] rsp_mux_src_data;                                               // rsp_mux:src_data -> pb_cpu_0_m0_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                              // pb_cpu_0_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [5:0] rsp_mux_src_channel;                                            // rsp_mux:src_channel -> pb_cpu_0_m0_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                      // rsp_mux:src_startofpacket -> pb_cpu_0_m0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                        // rsp_mux:src_endofpacket -> pb_cpu_0_m0_limiter:rsp_sink_endofpacket
	wire          pb_cpu_0_m0_limiter_rsp_src_valid;                              // pb_cpu_0_m0_limiter:rsp_src_valid -> pb_cpu_0_m0_agent:rp_valid
	wire  [118:0] pb_cpu_0_m0_limiter_rsp_src_data;                               // pb_cpu_0_m0_limiter:rsp_src_data -> pb_cpu_0_m0_agent:rp_data
	wire          pb_cpu_0_m0_limiter_rsp_src_ready;                              // pb_cpu_0_m0_agent:rp_ready -> pb_cpu_0_m0_limiter:rsp_src_ready
	wire    [5:0] pb_cpu_0_m0_limiter_rsp_src_channel;                            // pb_cpu_0_m0_limiter:rsp_src_channel -> pb_cpu_0_m0_agent:rp_channel
	wire          pb_cpu_0_m0_limiter_rsp_src_startofpacket;                      // pb_cpu_0_m0_limiter:rsp_src_startofpacket -> pb_cpu_0_m0_agent:rp_startofpacket
	wire          pb_cpu_0_m0_limiter_rsp_src_endofpacket;                        // pb_cpu_0_m0_limiter:rsp_src_endofpacket -> pb_cpu_0_m0_agent:rp_endofpacket
	wire          cmd_demux_src0_valid;                                           // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [118:0] cmd_demux_src0_data;                                            // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                           // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [5:0] cmd_demux_src0_channel;                                         // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                   // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                     // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                           // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [118:0] cmd_demux_src1_data;                                            // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                           // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [5:0] cmd_demux_src1_channel;                                         // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                   // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                     // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                           // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [118:0] cmd_demux_src2_data;                                            // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                           // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire    [5:0] cmd_demux_src2_channel;                                         // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                   // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                     // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                           // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [118:0] cmd_demux_src3_data;                                            // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                           // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire    [5:0] cmd_demux_src3_channel;                                         // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                   // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                     // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                           // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [118:0] cmd_demux_src4_data;                                            // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                           // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire    [5:0] cmd_demux_src4_channel;                                         // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                   // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                     // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                           // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [118:0] cmd_demux_src5_data;                                            // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                           // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire    [5:0] cmd_demux_src5_channel;                                         // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                   // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                     // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                           // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [118:0] rsp_demux_src0_data;                                            // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                           // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [5:0] rsp_demux_src0_channel;                                         // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                   // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                     // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                       // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [118:0] rsp_demux_001_src0_data;                                        // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                       // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [5:0] rsp_demux_001_src0_channel;                                     // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                               // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                 // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                       // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [118:0] rsp_demux_002_src0_data;                                        // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                       // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire    [5:0] rsp_demux_002_src0_channel;                                     // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                               // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                 // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                       // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [118:0] rsp_demux_003_src0_data;                                        // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                       // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire    [5:0] rsp_demux_003_src0_channel;                                     // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                               // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                 // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                       // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [118:0] rsp_demux_004_src0_data;                                        // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                       // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire    [5:0] rsp_demux_004_src0_channel;                                     // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                               // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                 // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                       // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [118:0] rsp_demux_005_src0_data;                                        // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                       // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire    [5:0] rsp_demux_005_src0_channel;                                     // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                               // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                 // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire    [5:0] pb_cpu_0_m0_limiter_cmd_valid_data;                             // pb_cpu_0_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid

	peripheral_subsys_altera_merlin_master_translator_192_lykd4la #(
		.AV_ADDRESS_W                (23),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (23),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (1),
		.WAITREQUEST_ALLOWANCE       (0),
		.USE_OUTPUTENABLE            (0)
	) pb_cpu_0_m0_translator (
		.clk                    (periph_clk_out_clk_clk),                                         //   input,   width = 1,                       clk.clk
		.reset                  (pb_cpu_0_m0_translator_reset_reset_bridge_in_reset_reset),       //   input,   width = 1,                     reset.reset
		.uav_address            (pb_cpu_0_m0_translator_avalon_universal_master_0_address),       //  output,  width = 23, avalon_universal_master_0.address
		.uav_burstcount         (pb_cpu_0_m0_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (pb_cpu_0_m0_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (pb_cpu_0_m0_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (pb_cpu_0_m0_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (pb_cpu_0_m0_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (pb_cpu_0_m0_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (pb_cpu_0_m0_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (pb_cpu_0_m0_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (pb_cpu_0_m0_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (pb_cpu_0_m0_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (pb_cpu_0_m0_address),                                            //   input,  width = 23,      avalon_anti_master_0.address
		.av_waitrequest         (pb_cpu_0_m0_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_burstcount          (pb_cpu_0_m0_burstcount),                                         //   input,   width = 1,                          .burstcount
		.av_byteenable          (pb_cpu_0_m0_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (pb_cpu_0_m0_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (pb_cpu_0_m0_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (pb_cpu_0_m0_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (pb_cpu_0_m0_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (pb_cpu_0_m0_writedata),                                          //   input,  width = 32,                          .writedata
		.av_debugaccess         (pb_cpu_0_m0_debugaccess),                                        //   input,   width = 1,                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                           // (terminated),                                        
		.av_begintransfer       (1'b0),                                                           // (terminated),                                        
		.av_chipselect          (1'b0),                                                           // (terminated),                                        
		.av_lock                (1'b0),                                                           // (terminated),                                        
		.uav_outputenable       (1'b0),                                                           // (terminated),                                        
		.uav_clken              (),                                                               // (terminated),                                        
		.av_clken               (1'b1),                                                           // (terminated),                                        
		.uav_response           (2'b00),                                                          // (terminated),                                        
		.av_response            (),                                                               // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                           // (terminated),                                        
		.av_writeresponsevalid  ()                                                                // (terminated),                                        
	);

	peripheral_subsys_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (23),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) sysid_control_slave_translator (
		.clk                    (periph_clk_out_clk_clk),                                   //   input,   width = 1,                      clk.clk
		.reset                  (pb_cpu_0_m0_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (sysid_control_slave_agent_m0_address),                     //   input,  width = 23, avalon_universal_slave_0.address
		.uav_burstcount         (sysid_control_slave_agent_m0_burstcount),                  //   input,   width = 3,                         .burstcount
		.uav_read               (sysid_control_slave_agent_m0_read),                        //   input,   width = 1,                         .read
		.uav_write              (sysid_control_slave_agent_m0_write),                       //   input,   width = 1,                         .write
		.uav_waitrequest        (sysid_control_slave_agent_m0_waitrequest),                 //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (sysid_control_slave_agent_m0_readdatavalid),               //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (sysid_control_slave_agent_m0_byteenable),                  //   input,   width = 4,                         .byteenable
		.uav_readdata           (sysid_control_slave_agent_m0_readdata),                    //  output,  width = 32,                         .readdata
		.uav_writedata          (sysid_control_slave_agent_m0_writedata),                   //   input,  width = 32,                         .writedata
		.uav_lock               (sysid_control_slave_agent_m0_lock),                        //   input,   width = 1,                         .lock
		.uav_debugaccess        (sysid_control_slave_agent_m0_debugaccess),                 //   input,   width = 1,                         .debugaccess
		.av_address             (sysid_control_slave_address),                              //  output,   width = 1,      avalon_anti_slave_0.address
		.av_readdata            (sysid_control_slave_readdata),                             //   input,  width = 32,                         .readdata
		.av_write               (),                                                         // (terminated),                                       
		.av_read                (),                                                         // (terminated),                                       
		.av_writedata           (),                                                         // (terminated),                                       
		.av_begintransfer       (),                                                         // (terminated),                                       
		.av_beginbursttransfer  (),                                                         // (terminated),                                       
		.av_burstcount          (),                                                         // (terminated),                                       
		.av_byteenable          (),                                                         // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                     // (terminated),                                       
		.av_waitrequest         (1'b0),                                                     // (terminated),                                       
		.av_writebyteenable     (),                                                         // (terminated),                                       
		.av_lock                (),                                                         // (terminated),                                       
		.av_chipselect          (),                                                         // (terminated),                                       
		.av_clken               (),                                                         // (terminated),                                       
		.uav_clken              (1'b0),                                                     // (terminated),                                       
		.av_debugaccess         (),                                                         // (terminated),                                       
		.av_outputenable        (),                                                         // (terminated),                                       
		.uav_response           (),                                                         // (terminated),                                       
		.av_response            (2'b00),                                                    // (terminated),                                       
		.uav_writeresponsevalid (),                                                         // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                      // (terminated),                                       
	);

	peripheral_subsys_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (23),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) led_pio_s1_translator (
		.clk                    (periph_clk_out_clk_clk),                                   //   input,   width = 1,                      clk.clk
		.reset                  (pb_cpu_0_m0_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (led_pio_s1_agent_m0_address),                              //   input,  width = 23, avalon_universal_slave_0.address
		.uav_burstcount         (led_pio_s1_agent_m0_burstcount),                           //   input,   width = 3,                         .burstcount
		.uav_read               (led_pio_s1_agent_m0_read),                                 //   input,   width = 1,                         .read
		.uav_write              (led_pio_s1_agent_m0_write),                                //   input,   width = 1,                         .write
		.uav_waitrequest        (led_pio_s1_agent_m0_waitrequest),                          //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (led_pio_s1_agent_m0_readdatavalid),                        //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (led_pio_s1_agent_m0_byteenable),                           //   input,   width = 4,                         .byteenable
		.uav_readdata           (led_pio_s1_agent_m0_readdata),                             //  output,  width = 32,                         .readdata
		.uav_writedata          (led_pio_s1_agent_m0_writedata),                            //   input,  width = 32,                         .writedata
		.uav_lock               (led_pio_s1_agent_m0_lock),                                 //   input,   width = 1,                         .lock
		.uav_debugaccess        (led_pio_s1_agent_m0_debugaccess),                          //   input,   width = 1,                         .debugaccess
		.av_address             (led_pio_s1_address),                                       //  output,   width = 2,      avalon_anti_slave_0.address
		.av_write               (led_pio_s1_write),                                         //  output,   width = 1,                         .write
		.av_readdata            (led_pio_s1_readdata),                                      //   input,  width = 32,                         .readdata
		.av_writedata           (led_pio_s1_writedata),                                     //  output,  width = 32,                         .writedata
		.av_chipselect          (led_pio_s1_chipselect),                                    //  output,   width = 1,                         .chipselect
		.av_read                (),                                                         // (terminated),                                       
		.av_begintransfer       (),                                                         // (terminated),                                       
		.av_beginbursttransfer  (),                                                         // (terminated),                                       
		.av_burstcount          (),                                                         // (terminated),                                       
		.av_byteenable          (),                                                         // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                     // (terminated),                                       
		.av_waitrequest         (1'b0),                                                     // (terminated),                                       
		.av_writebyteenable     (),                                                         // (terminated),                                       
		.av_lock                (),                                                         // (terminated),                                       
		.av_clken               (),                                                         // (terminated),                                       
		.uav_clken              (1'b0),                                                     // (terminated),                                       
		.av_debugaccess         (),                                                         // (terminated),                                       
		.av_outputenable        (),                                                         // (terminated),                                       
		.uav_response           (),                                                         // (terminated),                                       
		.av_response            (2'b00),                                                    // (terminated),                                       
		.uav_writeresponsevalid (),                                                         // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                      // (terminated),                                       
	);

	peripheral_subsys_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (23),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) dipsw_pio_s1_translator (
		.clk                    (periph_clk_out_clk_clk),                                   //   input,   width = 1,                      clk.clk
		.reset                  (pb_cpu_0_m0_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (dipsw_pio_s1_agent_m0_address),                            //   input,  width = 23, avalon_universal_slave_0.address
		.uav_burstcount         (dipsw_pio_s1_agent_m0_burstcount),                         //   input,   width = 3,                         .burstcount
		.uav_read               (dipsw_pio_s1_agent_m0_read),                               //   input,   width = 1,                         .read
		.uav_write              (dipsw_pio_s1_agent_m0_write),                              //   input,   width = 1,                         .write
		.uav_waitrequest        (dipsw_pio_s1_agent_m0_waitrequest),                        //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (dipsw_pio_s1_agent_m0_readdatavalid),                      //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (dipsw_pio_s1_agent_m0_byteenable),                         //   input,   width = 4,                         .byteenable
		.uav_readdata           (dipsw_pio_s1_agent_m0_readdata),                           //  output,  width = 32,                         .readdata
		.uav_writedata          (dipsw_pio_s1_agent_m0_writedata),                          //   input,  width = 32,                         .writedata
		.uav_lock               (dipsw_pio_s1_agent_m0_lock),                               //   input,   width = 1,                         .lock
		.uav_debugaccess        (dipsw_pio_s1_agent_m0_debugaccess),                        //   input,   width = 1,                         .debugaccess
		.av_address             (dipsw_pio_s1_address),                                     //  output,   width = 2,      avalon_anti_slave_0.address
		.av_write               (dipsw_pio_s1_write),                                       //  output,   width = 1,                         .write
		.av_readdata            (dipsw_pio_s1_readdata),                                    //   input,  width = 32,                         .readdata
		.av_writedata           (dipsw_pio_s1_writedata),                                   //  output,  width = 32,                         .writedata
		.av_chipselect          (dipsw_pio_s1_chipselect),                                  //  output,   width = 1,                         .chipselect
		.av_read                (),                                                         // (terminated),                                       
		.av_begintransfer       (),                                                         // (terminated),                                       
		.av_beginbursttransfer  (),                                                         // (terminated),                                       
		.av_burstcount          (),                                                         // (terminated),                                       
		.av_byteenable          (),                                                         // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                     // (terminated),                                       
		.av_waitrequest         (1'b0),                                                     // (terminated),                                       
		.av_writebyteenable     (),                                                         // (terminated),                                       
		.av_lock                (),                                                         // (terminated),                                       
		.av_clken               (),                                                         // (terminated),                                       
		.uav_clken              (1'b0),                                                     // (terminated),                                       
		.av_debugaccess         (),                                                         // (terminated),                                       
		.av_outputenable        (),                                                         // (terminated),                                       
		.uav_response           (),                                                         // (terminated),                                       
		.av_response            (2'b00),                                                    // (terminated),                                       
		.uav_writeresponsevalid (),                                                         // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                      // (terminated),                                       
	);

	peripheral_subsys_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (23),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) button_pio_s1_translator (
		.clk                    (periph_clk_out_clk_clk),                                   //   input,   width = 1,                      clk.clk
		.reset                  (pb_cpu_0_m0_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (button_pio_s1_agent_m0_address),                           //   input,  width = 23, avalon_universal_slave_0.address
		.uav_burstcount         (button_pio_s1_agent_m0_burstcount),                        //   input,   width = 3,                         .burstcount
		.uav_read               (button_pio_s1_agent_m0_read),                              //   input,   width = 1,                         .read
		.uav_write              (button_pio_s1_agent_m0_write),                             //   input,   width = 1,                         .write
		.uav_waitrequest        (button_pio_s1_agent_m0_waitrequest),                       //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (button_pio_s1_agent_m0_readdatavalid),                     //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (button_pio_s1_agent_m0_byteenable),                        //   input,   width = 4,                         .byteenable
		.uav_readdata           (button_pio_s1_agent_m0_readdata),                          //  output,  width = 32,                         .readdata
		.uav_writedata          (button_pio_s1_agent_m0_writedata),                         //   input,  width = 32,                         .writedata
		.uav_lock               (button_pio_s1_agent_m0_lock),                              //   input,   width = 1,                         .lock
		.uav_debugaccess        (button_pio_s1_agent_m0_debugaccess),                       //   input,   width = 1,                         .debugaccess
		.av_address             (button_pio_s1_address),                                    //  output,   width = 2,      avalon_anti_slave_0.address
		.av_write               (button_pio_s1_write),                                      //  output,   width = 1,                         .write
		.av_readdata            (button_pio_s1_readdata),                                   //   input,  width = 32,                         .readdata
		.av_writedata           (button_pio_s1_writedata),                                  //  output,  width = 32,                         .writedata
		.av_chipselect          (button_pio_s1_chipselect),                                 //  output,   width = 1,                         .chipselect
		.av_read                (),                                                         // (terminated),                                       
		.av_begintransfer       (),                                                         // (terminated),                                       
		.av_beginbursttransfer  (),                                                         // (terminated),                                       
		.av_burstcount          (),                                                         // (terminated),                                       
		.av_byteenable          (),                                                         // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                     // (terminated),                                       
		.av_waitrequest         (1'b0),                                                     // (terminated),                                       
		.av_writebyteenable     (),                                                         // (terminated),                                       
		.av_lock                (),                                                         // (terminated),                                       
		.av_clken               (),                                                         // (terminated),                                       
		.uav_clken              (1'b0),                                                     // (terminated),                                       
		.av_debugaccess         (),                                                         // (terminated),                                       
		.av_outputenable        (),                                                         // (terminated),                                       
		.uav_response           (),                                                         // (terminated),                                       
		.av_response            (2'b00),                                                    // (terminated),                                       
		.uav_writeresponsevalid (),                                                         // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                      // (terminated),                                       
	);

	peripheral_subsys_altera_merlin_master_agent_1921_2inlndi #(
		.PKT_WUNIQUE               (105),
		.PKT_DOMAIN_H              (104),
		.PKT_DOMAIN_L              (103),
		.PKT_SNOOP_H               (102),
		.PKT_SNOOP_L               (99),
		.PKT_BARRIER_H             (98),
		.PKT_BARRIER_L             (97),
		.PKT_ORI_BURST_SIZE_H      (96),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_QOS_H                 (77),
		.PKT_QOS_L                 (77),
		.PKT_DATA_SIDEBAND_H       (75),
		.PKT_DATA_SIDEBAND_L       (75),
		.PKT_ADDR_SIDEBAND_H       (74),
		.PKT_ADDR_SIDEBAND_L       (74),
		.PKT_BURST_TYPE_H          (73),
		.PKT_BURST_TYPE_L          (72),
		.PKT_CACHE_H               (91),
		.PKT_CACHE_L               (88),
		.PKT_THREAD_ID_H           (84),
		.PKT_THREAD_ID_L           (84),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_TRANS_EXCLUSIVE       (64),
		.PKT_TRANS_LOCK            (63),
		.PKT_BEGIN_BURST           (76),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (65),
		.PKT_ADDR_H                (58),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (59),
		.PKT_TRANS_POSTED          (60),
		.PKT_TRANS_WRITE           (61),
		.PKT_TRANS_READ            (62),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (78),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (81),
		.PKT_POISON_H              (106),
		.PKT_POISON_L              (106),
		.PKT_DATACHK_H             (107),
		.PKT_DATACHK_L             (107),
		.PKT_ADDRCHK_H             (108),
		.PKT_ADDRCHK_L             (108),
		.PKT_SAI_H                 (109),
		.PKT_SAI_L                 (109),
		.ST_DATA_W                 (119),
		.ST_CHANNEL_W              (6),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (1),
		.USE_PKT_DATACHK           (0),
		.USE_PKT_ADDRCHK           (0),
		.ROLE_BASED_USER           (0)
	) pb_cpu_0_m0_agent (
		.clk                   (periph_clk_out_clk_clk),                                         //   input,    width = 1,       clk.clk
		.reset                 (pb_cpu_0_m0_translator_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.av_address            (pb_cpu_0_m0_translator_avalon_universal_master_0_address),       //   input,   width = 23,        av.address
		.av_write              (pb_cpu_0_m0_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (pb_cpu_0_m0_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (pb_cpu_0_m0_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (pb_cpu_0_m0_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (pb_cpu_0_m0_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (pb_cpu_0_m0_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (pb_cpu_0_m0_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (pb_cpu_0_m0_translator_avalon_universal_master_0_burstcount),    //   input,    width = 3,          .burstcount
		.av_debugaccess        (pb_cpu_0_m0_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (pb_cpu_0_m0_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (pb_cpu_0_m0_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (pb_cpu_0_m0_agent_cp_data),                                      //  output,  width = 119,          .data
		.cp_startofpacket      (pb_cpu_0_m0_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (pb_cpu_0_m0_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (pb_cpu_0_m0_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (pb_cpu_0_m0_limiter_rsp_src_valid),                              //   input,    width = 1,        rp.valid
		.rp_data               (pb_cpu_0_m0_limiter_rsp_src_data),                               //   input,  width = 119,          .data
		.rp_channel            (pb_cpu_0_m0_limiter_rsp_src_channel),                            //   input,    width = 6,          .channel
		.rp_startofpacket      (pb_cpu_0_m0_limiter_rsp_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (pb_cpu_0_m0_limiter_rsp_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.rp_ready              (pb_cpu_0_m0_limiter_rsp_src_ready),                              //  output,    width = 1,          .ready
		.av_response           (),                                                               // (terminated),                         
		.av_writeresponsevalid ()                                                                // (terminated),                         
	);

	peripheral_subsys_altera_merlin_axi_slave_ni_1971_zovv3rq #(
		.PKT_QOS_H                   (77),
		.PKT_QOS_L                   (77),
		.PKT_THREAD_ID_H             (84),
		.PKT_THREAD_ID_L             (84),
		.PKT_RESPONSE_STATUS_H       (93),
		.PKT_RESPONSE_STATUS_L       (92),
		.PKT_BEGIN_BURST             (76),
		.PKT_CACHE_H                 (91),
		.PKT_CACHE_L                 (88),
		.PKT_DATA_SIDEBAND_H         (75),
		.PKT_DATA_SIDEBAND_L         (75),
		.PKT_ADDR_SIDEBAND_H         (74),
		.PKT_ADDR_SIDEBAND_L         (74),
		.PKT_BURST_TYPE_H            (73),
		.PKT_BURST_TYPE_L            (72),
		.PKT_PROTECTION_H            (87),
		.PKT_PROTECTION_L            (85),
		.PKT_BURST_SIZE_H            (71),
		.PKT_BURST_SIZE_L            (69),
		.PKT_BURSTWRAP_H             (68),
		.PKT_BURSTWRAP_L             (68),
		.PKT_BYTE_CNT_H              (67),
		.PKT_BYTE_CNT_L              (65),
		.PKT_ADDR_H                  (58),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (64),
		.PKT_TRANS_LOCK              (63),
		.PKT_TRANS_COMPRESSED_READ   (59),
		.PKT_TRANS_POSTED            (60),
		.PKT_TRANS_WRITE             (61),
		.PKT_TRANS_READ              (62),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (80),
		.PKT_SRC_ID_L                (78),
		.PKT_DEST_ID_H               (83),
		.PKT_DEST_ID_L               (81),
		.PKT_ORI_BURST_SIZE_L        (94),
		.PKT_ORI_BURST_SIZE_H        (96),
		.PKT_DOMAIN_L                (103),
		.PKT_DOMAIN_H                (104),
		.PKT_SNOOP_L                 (99),
		.PKT_SNOOP_H                 (102),
		.PKT_BARRIER_L               (97),
		.PKT_BARRIER_H               (98),
		.PKT_WUNIQUE                 (105),
		.PKT_EOP_OOO                 (110),
		.PKT_SOP_OOO                 (111),
		.PKT_POISON_H                (106),
		.PKT_POISON_L                (106),
		.PKT_DATACHK_H               (107),
		.PKT_DATACHK_L               (107),
		.PKT_ADDRCHK_H               (108),
		.PKT_ADDRCHK_L               (108),
		.PKT_SAI_H                   (109),
		.PKT_SAI_L                   (109),
		.SAI_WIDTH                   (1),
		.ADDRCHK_WIDTH               (1),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (119),
		.ADDR_WIDTH                  (22),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (6),
		.AXI_SLAVE_ID_W              (1),
		.ACE_LITE_SUPPORT            (0),
		.PASS_ID_TO_SLAVE            (0),
		.AXI_VERSION                 ("AXI4Lite"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1),
		.USE_PKT_DATACHK             (0),
		.USE_PKT_ADDRCHK             (0),
		.SYNC_RESET                  (1),
		.USE_MEMORY_BLOCKS           (0),
		.ROLE_BASED_USER             (0),
		.ENABLE_OOO                  (0),
		.REORDER_BUFFER              (0)
	) ssgdma_0_host_csr_agent (
		.aclk                   (periph_clk_out_clk_clk),                                    //   input,    width = 1,        clock_sink.clk
		.aresetn                (~pb_cpu_0_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,        reset_sink.reset_n
		.read_cp_valid          (cmd_mux_001_src_valid),                                     //   input,    width = 1,           read_cp.valid
		.read_cp_ready          (cmd_mux_001_src_ready),                                     //  output,    width = 1,                  .ready
		.read_cp_data           (cmd_mux_001_src_data),                                      //   input,  width = 119,                  .data
		.read_cp_channel        (cmd_mux_001_src_channel),                                   //   input,    width = 6,                  .channel
		.read_cp_startofpacket  (cmd_mux_001_src_startofpacket),                             //   input,    width = 1,                  .startofpacket
		.read_cp_endofpacket    (cmd_mux_001_src_endofpacket),                               //   input,    width = 1,                  .endofpacket
		.write_cp_ready         (cmd_mux_src_ready),                                         //  output,    width = 1,          write_cp.ready
		.write_cp_valid         (cmd_mux_src_valid),                                         //   input,    width = 1,                  .valid
		.write_cp_data          (cmd_mux_src_data),                                          //   input,  width = 119,                  .data
		.write_cp_channel       (cmd_mux_src_channel),                                       //   input,    width = 6,                  .channel
		.write_cp_startofpacket (cmd_mux_src_startofpacket),                                 //   input,    width = 1,                  .startofpacket
		.write_cp_endofpacket   (cmd_mux_src_endofpacket),                                   //   input,    width = 1,                  .endofpacket
		.read_rp_ready          (ssgdma_0_host_csr_agent_read_rp_ready),                     //   input,    width = 1,           read_rp.ready
		.read_rp_valid          (ssgdma_0_host_csr_agent_read_rp_valid),                     //  output,    width = 1,                  .valid
		.read_rp_data           (ssgdma_0_host_csr_agent_read_rp_data),                      //  output,  width = 119,                  .data
		.read_rp_startofpacket  (ssgdma_0_host_csr_agent_read_rp_startofpacket),             //  output,    width = 1,                  .startofpacket
		.read_rp_endofpacket    (ssgdma_0_host_csr_agent_read_rp_endofpacket),               //  output,    width = 1,                  .endofpacket
		.write_rp_ready         (ssgdma_0_host_csr_agent_write_rp_ready),                    //   input,    width = 1,          write_rp.ready
		.write_rp_valid         (ssgdma_0_host_csr_agent_write_rp_valid),                    //  output,    width = 1,                  .valid
		.write_rp_data          (ssgdma_0_host_csr_agent_write_rp_data),                     //  output,  width = 119,                  .data
		.write_rp_startofpacket (ssgdma_0_host_csr_agent_write_rp_startofpacket),            //  output,    width = 1,                  .startofpacket
		.write_rp_endofpacket   (ssgdma_0_host_csr_agent_write_rp_endofpacket),              //  output,    width = 1,                  .endofpacket
		.awaddr                 (ssgdma_0_host_csr_awaddr),                                  //  output,   width = 22, altera_axi_master.awaddr
		.awprot                 (ssgdma_0_host_csr_awprot),                                  //  output,    width = 3,                  .awprot
		.awvalid                (ssgdma_0_host_csr_awvalid),                                 //  output,    width = 1,                  .awvalid
		.awready                (ssgdma_0_host_csr_awready),                                 //   input,    width = 1,                  .awready
		.wdata                  (ssgdma_0_host_csr_wdata),                                   //  output,   width = 32,                  .wdata
		.wstrb                  (ssgdma_0_host_csr_wstrb),                                   //  output,    width = 4,                  .wstrb
		.wvalid                 (ssgdma_0_host_csr_wvalid),                                  //  output,    width = 1,                  .wvalid
		.wready                 (ssgdma_0_host_csr_wready),                                  //   input,    width = 1,                  .wready
		.bresp                  (ssgdma_0_host_csr_bresp),                                   //   input,    width = 2,                  .bresp
		.bvalid                 (ssgdma_0_host_csr_bvalid),                                  //   input,    width = 1,                  .bvalid
		.bready                 (ssgdma_0_host_csr_bready),                                  //  output,    width = 1,                  .bready
		.araddr                 (ssgdma_0_host_csr_araddr),                                  //  output,   width = 22,                  .araddr
		.arprot                 (ssgdma_0_host_csr_arprot),                                  //  output,    width = 3,                  .arprot
		.arvalid                (ssgdma_0_host_csr_arvalid),                                 //  output,    width = 1,                  .arvalid
		.arready                (ssgdma_0_host_csr_arready),                                 //   input,    width = 1,                  .arready
		.rdata                  (ssgdma_0_host_csr_rdata),                                   //   input,   width = 32,                  .rdata
		.rresp                  (ssgdma_0_host_csr_rresp),                                   //   input,    width = 2,                  .rresp
		.rvalid                 (ssgdma_0_host_csr_rvalid),                                  //   input,    width = 1,                  .rvalid
		.rready                 (ssgdma_0_host_csr_rready),                                  //  output,    width = 1,                  .rready
		.awuser_addrchk         (),                                                          // (terminated),                                 
		.awuser_sai             (),                                                          // (terminated),                                 
		.wuser_datachk          (),                                                          // (terminated),                                 
		.wuser_poison           (),                                                          // (terminated),                                 
		.aruser_addrchk         (),                                                          // (terminated),                                 
		.aruser_sai             (),                                                          // (terminated),                                 
		.ruser_datachk          (4'b0000),                                                   // (terminated),                                 
		.ruser_poison           (1'b0),                                                      // (terminated),                                 
		.bid                    (1'b0),                                                      // (terminated),                                 
		.buser                  (1'b0),                                                      // (terminated),                                 
		.rid                    (1'b0),                                                      // (terminated),                                 
		.ruser                  (1'b0),                                                      // (terminated),                                 
		.rlast                  (1'b0),                                                      // (terminated),                                 
		.arid                   (),                                                          // (terminated),                                 
		.arlen                  (),                                                          // (terminated),                                 
		.arsize                 (),                                                          // (terminated),                                 
		.arburst                (),                                                          // (terminated),                                 
		.arlock                 (),                                                          // (terminated),                                 
		.arcache                (),                                                          // (terminated),                                 
		.aruser                 (),                                                          // (terminated),                                 
		.wid                    (),                                                          // (terminated),                                 
		.wuser                  (),                                                          // (terminated),                                 
		.wlast                  (),                                                          // (terminated),                                 
		.awid                   (),                                                          // (terminated),                                 
		.awlen                  (),                                                          // (terminated),                                 
		.awsize                 (),                                                          // (terminated),                                 
		.awburst                (),                                                          // (terminated),                                 
		.awlock                 (),                                                          // (terminated),                                 
		.awcache                (),                                                          // (terminated),                                 
		.awuser                 (),                                                          // (terminated),                                 
		.awqos                  (),                                                          // (terminated),                                 
		.awregion               (),                                                          // (terminated),                                 
		.arqos                  (),                                                          // (terminated),                                 
		.arregion               (),                                                          // (terminated),                                 
		.arsnoop                (),                                                          // (terminated),                                 
		.ardomain               (),                                                          // (terminated),                                 
		.arbar                  (),                                                          // (terminated),                                 
		.awsnoop                (),                                                          // (terminated),                                 
		.awdomain               (),                                                          // (terminated),                                 
		.awbar                  (),                                                          // (terminated),                                 
		.awunique               ()                                                           // (terminated),                                 
	);

	peripheral_subsys_altera_merlin_slave_agent_1921_b6r3djy #(
		.PKT_ORI_BURST_SIZE_H      (96),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_TRANS_LOCK            (63),
		.PKT_BEGIN_BURST           (76),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (65),
		.PKT_ADDR_H                (58),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (59),
		.PKT_TRANS_POSTED          (60),
		.PKT_TRANS_WRITE           (61),
		.PKT_TRANS_READ            (62),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (78),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (81),
		.PKT_POISON_H              (106),
		.PKT_POISON_L              (106),
		.PKT_DATACHK_H             (107),
		.PKT_DATACHK_L             (107),
		.PKT_SAI_H                 (109),
		.PKT_SAI_L                 (109),
		.PKT_ADDRCHK_H             (108),
		.PKT_ADDRCHK_L             (108),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (119),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1),
		.USE_PKT_DATACHK           (0),
		.ROLE_BASED_USER           (0)
	) sysid_control_slave_agent (
		.clk                     (periph_clk_out_clk_clk),                                   //   input,    width = 1,             clk.clk
		.reset                   (pb_cpu_0_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (sysid_control_slave_agent_m0_address),                     //  output,   width = 23,              m0.address
		.m0_burstcount           (sysid_control_slave_agent_m0_burstcount),                  //  output,    width = 3,                .burstcount
		.m0_byteenable           (sysid_control_slave_agent_m0_byteenable),                  //  output,    width = 4,                .byteenable
		.m0_debugaccess          (sysid_control_slave_agent_m0_debugaccess),                 //  output,    width = 1,                .debugaccess
		.m0_lock                 (sysid_control_slave_agent_m0_lock),                        //  output,    width = 1,                .lock
		.m0_readdata             (sysid_control_slave_agent_m0_readdata),                    //   input,   width = 32,                .readdata
		.m0_readdatavalid        (sysid_control_slave_agent_m0_readdatavalid),               //   input,    width = 1,                .readdatavalid
		.m0_read                 (sysid_control_slave_agent_m0_read),                        //  output,    width = 1,                .read
		.m0_waitrequest          (sysid_control_slave_agent_m0_waitrequest),                 //   input,    width = 1,                .waitrequest
		.m0_writedata            (sysid_control_slave_agent_m0_writedata),                   //  output,   width = 32,                .writedata
		.m0_write                (sysid_control_slave_agent_m0_write),                       //  output,    width = 1,                .write
		.rp_endofpacket          (sysid_control_slave_agent_rp_endofpacket),                 //  output,    width = 1,              rp.endofpacket
		.rp_ready                (sysid_control_slave_agent_rp_ready),                       //   input,    width = 1,                .ready
		.rp_valid                (sysid_control_slave_agent_rp_valid),                       //  output,    width = 1,                .valid
		.rp_data                 (sysid_control_slave_agent_rp_data),                        //  output,  width = 119,                .data
		.rp_startofpacket        (sysid_control_slave_agent_rp_startofpacket),               //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                    //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                    //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_002_src_data),                                     //   input,  width = 119,                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                            //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                              //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                  //   input,    width = 6,                .channel
		.rf_sink_ready           (sysid_control_slave_agent_rsp_fifo_out_ready),             //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (sysid_control_slave_agent_rsp_fifo_out_valid),             //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (sysid_control_slave_agent_rsp_fifo_out_startofpacket),     //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (sysid_control_slave_agent_rsp_fifo_out_endofpacket),       //   input,    width = 1,                .endofpacket
		.rf_sink_data            (sysid_control_slave_agent_rsp_fifo_out_data),              //   input,  width = 120,                .data
		.rf_source_ready         (sysid_control_slave_agent_rf_source_ready),                //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (sysid_control_slave_agent_rf_source_valid),                //  output,    width = 1,                .valid
		.rf_source_startofpacket (sysid_control_slave_agent_rf_source_startofpacket),        //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (sysid_control_slave_agent_rf_source_endofpacket),          //  output,    width = 1,                .endofpacket
		.rf_source_data          (sysid_control_slave_agent_rf_source_data),                 //  output,  width = 120,                .data
		.rdata_fifo_sink_ready   (sysid_control_slave_agent_rdata_fifo_src_ready),           //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sysid_control_slave_agent_rdata_fifo_src_valid),           //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (sysid_control_slave_agent_rdata_fifo_src_data),            //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (sysid_control_slave_agent_rdata_fifo_src_ready),           //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_control_slave_agent_rdata_fifo_src_valid),           //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (sysid_control_slave_agent_rdata_fifo_src_data),            //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                    // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                     // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                      // (terminated),                               
	);

	peripheral_subsys_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (120),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) sysid_control_slave_agent_rsp_fifo (
		.clk               (periph_clk_out_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset             (pb_cpu_0_reset_reset_bridge_in_reset_reset),           //   input,    width = 1, clk_reset.reset
		.in_data           (sysid_control_slave_agent_rf_source_data),             //   input,  width = 120,        in.data
		.in_valid          (sysid_control_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (sysid_control_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (sysid_control_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (sysid_control_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (sysid_control_slave_agent_rsp_fifo_out_data),          //  output,  width = 120,       out.data
		.out_valid         (sysid_control_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (sysid_control_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (sysid_control_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                // (terminated),                         
		.csr_read          (1'b0),                                                 // (terminated),                         
		.csr_write         (1'b0),                                                 // (terminated),                         
		.csr_readdata      (),                                                     // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated),                         
		.almost_full_data  (),                                                     // (terminated),                         
		.almost_empty_data (),                                                     // (terminated),                         
		.in_empty          (1'b0),                                                 // (terminated),                         
		.out_empty         (),                                                     // (terminated),                         
		.in_error          (1'b0),                                                 // (terminated),                         
		.out_error         (),                                                     // (terminated),                         
		.in_channel        (1'b0),                                                 // (terminated),                         
		.out_channel       ()                                                      // (terminated),                         
	);

	peripheral_subsys_altera_merlin_slave_agent_1921_b6r3djy #(
		.PKT_ORI_BURST_SIZE_H      (96),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_TRANS_LOCK            (63),
		.PKT_BEGIN_BURST           (76),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (65),
		.PKT_ADDR_H                (58),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (59),
		.PKT_TRANS_POSTED          (60),
		.PKT_TRANS_WRITE           (61),
		.PKT_TRANS_READ            (62),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (78),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (81),
		.PKT_POISON_H              (106),
		.PKT_POISON_L              (106),
		.PKT_DATACHK_H             (107),
		.PKT_DATACHK_L             (107),
		.PKT_SAI_H                 (109),
		.PKT_SAI_L                 (109),
		.PKT_ADDRCHK_H             (108),
		.PKT_ADDRCHK_L             (108),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (119),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1),
		.USE_PKT_DATACHK           (0),
		.ROLE_BASED_USER           (0)
	) led_pio_s1_agent (
		.clk                     (periph_clk_out_clk_clk),                                   //   input,    width = 1,             clk.clk
		.reset                   (pb_cpu_0_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (led_pio_s1_agent_m0_address),                              //  output,   width = 23,              m0.address
		.m0_burstcount           (led_pio_s1_agent_m0_burstcount),                           //  output,    width = 3,                .burstcount
		.m0_byteenable           (led_pio_s1_agent_m0_byteenable),                           //  output,    width = 4,                .byteenable
		.m0_debugaccess          (led_pio_s1_agent_m0_debugaccess),                          //  output,    width = 1,                .debugaccess
		.m0_lock                 (led_pio_s1_agent_m0_lock),                                 //  output,    width = 1,                .lock
		.m0_readdata             (led_pio_s1_agent_m0_readdata),                             //   input,   width = 32,                .readdata
		.m0_readdatavalid        (led_pio_s1_agent_m0_readdatavalid),                        //   input,    width = 1,                .readdatavalid
		.m0_read                 (led_pio_s1_agent_m0_read),                                 //  output,    width = 1,                .read
		.m0_waitrequest          (led_pio_s1_agent_m0_waitrequest),                          //   input,    width = 1,                .waitrequest
		.m0_writedata            (led_pio_s1_agent_m0_writedata),                            //  output,   width = 32,                .writedata
		.m0_write                (led_pio_s1_agent_m0_write),                                //  output,    width = 1,                .write
		.rp_endofpacket          (led_pio_s1_agent_rp_endofpacket),                          //  output,    width = 1,              rp.endofpacket
		.rp_ready                (led_pio_s1_agent_rp_ready),                                //   input,    width = 1,                .ready
		.rp_valid                (led_pio_s1_agent_rp_valid),                                //  output,    width = 1,                .valid
		.rp_data                 (led_pio_s1_agent_rp_data),                                 //  output,  width = 119,                .data
		.rp_startofpacket        (led_pio_s1_agent_rp_startofpacket),                        //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                    //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                    //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_003_src_data),                                     //   input,  width = 119,                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                            //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                              //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                  //   input,    width = 6,                .channel
		.rf_sink_ready           (led_pio_s1_agent_rsp_fifo_out_ready),                      //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (led_pio_s1_agent_rsp_fifo_out_valid),                      //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (led_pio_s1_agent_rsp_fifo_out_startofpacket),              //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (led_pio_s1_agent_rsp_fifo_out_endofpacket),                //   input,    width = 1,                .endofpacket
		.rf_sink_data            (led_pio_s1_agent_rsp_fifo_out_data),                       //   input,  width = 120,                .data
		.rf_source_ready         (led_pio_s1_agent_rf_source_ready),                         //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (led_pio_s1_agent_rf_source_valid),                         //  output,    width = 1,                .valid
		.rf_source_startofpacket (led_pio_s1_agent_rf_source_startofpacket),                 //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (led_pio_s1_agent_rf_source_endofpacket),                   //  output,    width = 1,                .endofpacket
		.rf_source_data          (led_pio_s1_agent_rf_source_data),                          //  output,  width = 120,                .data
		.rdata_fifo_sink_ready   (led_pio_s1_agent_rdata_fifo_src_ready),                    //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (led_pio_s1_agent_rdata_fifo_src_valid),                    //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (led_pio_s1_agent_rdata_fifo_src_data),                     //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (led_pio_s1_agent_rdata_fifo_src_ready),                    //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (led_pio_s1_agent_rdata_fifo_src_valid),                    //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (led_pio_s1_agent_rdata_fifo_src_data),                     //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                    // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                     // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                      // (terminated),                               
	);

	peripheral_subsys_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (120),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) led_pio_s1_agent_rsp_fifo (
		.clk               (periph_clk_out_clk_clk),                      //   input,    width = 1,       clk.clk
		.reset             (pb_cpu_0_reset_reset_bridge_in_reset_reset),  //   input,    width = 1, clk_reset.reset
		.in_data           (led_pio_s1_agent_rf_source_data),             //   input,  width = 120,        in.data
		.in_valid          (led_pio_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (led_pio_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (led_pio_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (led_pio_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (led_pio_s1_agent_rsp_fifo_out_data),          //  output,  width = 120,       out.data
		.out_valid         (led_pio_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (led_pio_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (led_pio_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (led_pio_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                       // (terminated),                         
		.csr_read          (1'b0),                                        // (terminated),                         
		.csr_write         (1'b0),                                        // (terminated),                         
		.csr_readdata      (),                                            // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated),                         
		.almost_full_data  (),                                            // (terminated),                         
		.almost_empty_data (),                                            // (terminated),                         
		.in_empty          (1'b0),                                        // (terminated),                         
		.out_empty         (),                                            // (terminated),                         
		.in_error          (1'b0),                                        // (terminated),                         
		.out_error         (),                                            // (terminated),                         
		.in_channel        (1'b0),                                        // (terminated),                         
		.out_channel       ()                                             // (terminated),                         
	);

	peripheral_subsys_altera_merlin_slave_agent_1921_b6r3djy #(
		.PKT_ORI_BURST_SIZE_H      (96),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_TRANS_LOCK            (63),
		.PKT_BEGIN_BURST           (76),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (65),
		.PKT_ADDR_H                (58),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (59),
		.PKT_TRANS_POSTED          (60),
		.PKT_TRANS_WRITE           (61),
		.PKT_TRANS_READ            (62),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (78),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (81),
		.PKT_POISON_H              (106),
		.PKT_POISON_L              (106),
		.PKT_DATACHK_H             (107),
		.PKT_DATACHK_L             (107),
		.PKT_SAI_H                 (109),
		.PKT_SAI_L                 (109),
		.PKT_ADDRCHK_H             (108),
		.PKT_ADDRCHK_L             (108),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (119),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1),
		.USE_PKT_DATACHK           (0),
		.ROLE_BASED_USER           (0)
	) dipsw_pio_s1_agent (
		.clk                     (periph_clk_out_clk_clk),                                   //   input,    width = 1,             clk.clk
		.reset                   (pb_cpu_0_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (dipsw_pio_s1_agent_m0_address),                            //  output,   width = 23,              m0.address
		.m0_burstcount           (dipsw_pio_s1_agent_m0_burstcount),                         //  output,    width = 3,                .burstcount
		.m0_byteenable           (dipsw_pio_s1_agent_m0_byteenable),                         //  output,    width = 4,                .byteenable
		.m0_debugaccess          (dipsw_pio_s1_agent_m0_debugaccess),                        //  output,    width = 1,                .debugaccess
		.m0_lock                 (dipsw_pio_s1_agent_m0_lock),                               //  output,    width = 1,                .lock
		.m0_readdata             (dipsw_pio_s1_agent_m0_readdata),                           //   input,   width = 32,                .readdata
		.m0_readdatavalid        (dipsw_pio_s1_agent_m0_readdatavalid),                      //   input,    width = 1,                .readdatavalid
		.m0_read                 (dipsw_pio_s1_agent_m0_read),                               //  output,    width = 1,                .read
		.m0_waitrequest          (dipsw_pio_s1_agent_m0_waitrequest),                        //   input,    width = 1,                .waitrequest
		.m0_writedata            (dipsw_pio_s1_agent_m0_writedata),                          //  output,   width = 32,                .writedata
		.m0_write                (dipsw_pio_s1_agent_m0_write),                              //  output,    width = 1,                .write
		.rp_endofpacket          (dipsw_pio_s1_agent_rp_endofpacket),                        //  output,    width = 1,              rp.endofpacket
		.rp_ready                (dipsw_pio_s1_agent_rp_ready),                              //   input,    width = 1,                .ready
		.rp_valid                (dipsw_pio_s1_agent_rp_valid),                              //  output,    width = 1,                .valid
		.rp_data                 (dipsw_pio_s1_agent_rp_data),                               //  output,  width = 119,                .data
		.rp_startofpacket        (dipsw_pio_s1_agent_rp_startofpacket),                      //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                    //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                    //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_004_src_data),                                     //   input,  width = 119,                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                            //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                              //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                  //   input,    width = 6,                .channel
		.rf_sink_ready           (dipsw_pio_s1_agent_rsp_fifo_out_ready),                    //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (dipsw_pio_s1_agent_rsp_fifo_out_valid),                    //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (dipsw_pio_s1_agent_rsp_fifo_out_startofpacket),            //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (dipsw_pio_s1_agent_rsp_fifo_out_endofpacket),              //   input,    width = 1,                .endofpacket
		.rf_sink_data            (dipsw_pio_s1_agent_rsp_fifo_out_data),                     //   input,  width = 120,                .data
		.rf_source_ready         (dipsw_pio_s1_agent_rf_source_ready),                       //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (dipsw_pio_s1_agent_rf_source_valid),                       //  output,    width = 1,                .valid
		.rf_source_startofpacket (dipsw_pio_s1_agent_rf_source_startofpacket),               //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (dipsw_pio_s1_agent_rf_source_endofpacket),                 //  output,    width = 1,                .endofpacket
		.rf_source_data          (dipsw_pio_s1_agent_rf_source_data),                        //  output,  width = 120,                .data
		.rdata_fifo_sink_ready   (dipsw_pio_s1_agent_rdata_fifo_src_ready),                  //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (dipsw_pio_s1_agent_rdata_fifo_src_valid),                  //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (dipsw_pio_s1_agent_rdata_fifo_src_data),                   //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (dipsw_pio_s1_agent_rdata_fifo_src_ready),                  //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dipsw_pio_s1_agent_rdata_fifo_src_valid),                  //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (dipsw_pio_s1_agent_rdata_fifo_src_data),                   //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                    // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                     // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                      // (terminated),                               
	);

	peripheral_subsys_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (120),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) dipsw_pio_s1_agent_rsp_fifo (
		.clk               (periph_clk_out_clk_clk),                        //   input,    width = 1,       clk.clk
		.reset             (pb_cpu_0_reset_reset_bridge_in_reset_reset),    //   input,    width = 1, clk_reset.reset
		.in_data           (dipsw_pio_s1_agent_rf_source_data),             //   input,  width = 120,        in.data
		.in_valid          (dipsw_pio_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (dipsw_pio_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (dipsw_pio_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (dipsw_pio_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (dipsw_pio_s1_agent_rsp_fifo_out_data),          //  output,  width = 120,       out.data
		.out_valid         (dipsw_pio_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (dipsw_pio_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (dipsw_pio_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (dipsw_pio_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                         // (terminated),                         
		.csr_read          (1'b0),                                          // (terminated),                         
		.csr_write         (1'b0),                                          // (terminated),                         
		.csr_readdata      (),                                              // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated),                         
		.almost_full_data  (),                                              // (terminated),                         
		.almost_empty_data (),                                              // (terminated),                         
		.in_empty          (1'b0),                                          // (terminated),                         
		.out_empty         (),                                              // (terminated),                         
		.in_error          (1'b0),                                          // (terminated),                         
		.out_error         (),                                              // (terminated),                         
		.in_channel        (1'b0),                                          // (terminated),                         
		.out_channel       ()                                               // (terminated),                         
	);

	peripheral_subsys_altera_merlin_slave_agent_1921_b6r3djy #(
		.PKT_ORI_BURST_SIZE_H      (96),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_TRANS_LOCK            (63),
		.PKT_BEGIN_BURST           (76),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (68),
		.PKT_BYTE_CNT_H            (67),
		.PKT_BYTE_CNT_L            (65),
		.PKT_ADDR_H                (58),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (59),
		.PKT_TRANS_POSTED          (60),
		.PKT_TRANS_WRITE           (61),
		.PKT_TRANS_READ            (62),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (78),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (81),
		.PKT_POISON_H              (106),
		.PKT_POISON_L              (106),
		.PKT_DATACHK_H             (107),
		.PKT_DATACHK_L             (107),
		.PKT_SAI_H                 (109),
		.PKT_SAI_L                 (109),
		.PKT_ADDRCHK_H             (108),
		.PKT_ADDRCHK_L             (108),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (119),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1),
		.USE_PKT_DATACHK           (0),
		.ROLE_BASED_USER           (0)
	) button_pio_s1_agent (
		.clk                     (periph_clk_out_clk_clk),                                   //   input,    width = 1,             clk.clk
		.reset                   (pb_cpu_0_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (button_pio_s1_agent_m0_address),                           //  output,   width = 23,              m0.address
		.m0_burstcount           (button_pio_s1_agent_m0_burstcount),                        //  output,    width = 3,                .burstcount
		.m0_byteenable           (button_pio_s1_agent_m0_byteenable),                        //  output,    width = 4,                .byteenable
		.m0_debugaccess          (button_pio_s1_agent_m0_debugaccess),                       //  output,    width = 1,                .debugaccess
		.m0_lock                 (button_pio_s1_agent_m0_lock),                              //  output,    width = 1,                .lock
		.m0_readdata             (button_pio_s1_agent_m0_readdata),                          //   input,   width = 32,                .readdata
		.m0_readdatavalid        (button_pio_s1_agent_m0_readdatavalid),                     //   input,    width = 1,                .readdatavalid
		.m0_read                 (button_pio_s1_agent_m0_read),                              //  output,    width = 1,                .read
		.m0_waitrequest          (button_pio_s1_agent_m0_waitrequest),                       //   input,    width = 1,                .waitrequest
		.m0_writedata            (button_pio_s1_agent_m0_writedata),                         //  output,   width = 32,                .writedata
		.m0_write                (button_pio_s1_agent_m0_write),                             //  output,    width = 1,                .write
		.rp_endofpacket          (button_pio_s1_agent_rp_endofpacket),                       //  output,    width = 1,              rp.endofpacket
		.rp_ready                (button_pio_s1_agent_rp_ready),                             //   input,    width = 1,                .ready
		.rp_valid                (button_pio_s1_agent_rp_valid),                             //  output,    width = 1,                .valid
		.rp_data                 (button_pio_s1_agent_rp_data),                              //  output,  width = 119,                .data
		.rp_startofpacket        (button_pio_s1_agent_rp_startofpacket),                     //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                    //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                    //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_005_src_data),                                     //   input,  width = 119,                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                            //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                              //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                  //   input,    width = 6,                .channel
		.rf_sink_ready           (button_pio_s1_agent_rsp_fifo_out_ready),                   //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (button_pio_s1_agent_rsp_fifo_out_valid),                   //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (button_pio_s1_agent_rsp_fifo_out_startofpacket),           //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (button_pio_s1_agent_rsp_fifo_out_endofpacket),             //   input,    width = 1,                .endofpacket
		.rf_sink_data            (button_pio_s1_agent_rsp_fifo_out_data),                    //   input,  width = 120,                .data
		.rf_source_ready         (button_pio_s1_agent_rf_source_ready),                      //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (button_pio_s1_agent_rf_source_valid),                      //  output,    width = 1,                .valid
		.rf_source_startofpacket (button_pio_s1_agent_rf_source_startofpacket),              //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (button_pio_s1_agent_rf_source_endofpacket),                //  output,    width = 1,                .endofpacket
		.rf_source_data          (button_pio_s1_agent_rf_source_data),                       //  output,  width = 120,                .data
		.rdata_fifo_sink_ready   (button_pio_s1_agent_rdata_fifo_src_ready),                 //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (button_pio_s1_agent_rdata_fifo_src_valid),                 //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (button_pio_s1_agent_rdata_fifo_src_data),                  //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (button_pio_s1_agent_rdata_fifo_src_ready),                 //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (button_pio_s1_agent_rdata_fifo_src_valid),                 //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (button_pio_s1_agent_rdata_fifo_src_data),                  //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                    // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                     // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                      // (terminated),                               
	);

	peripheral_subsys_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (120),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) button_pio_s1_agent_rsp_fifo (
		.clk               (periph_clk_out_clk_clk),                         //   input,    width = 1,       clk.clk
		.reset             (pb_cpu_0_reset_reset_bridge_in_reset_reset),     //   input,    width = 1, clk_reset.reset
		.in_data           (button_pio_s1_agent_rf_source_data),             //   input,  width = 120,        in.data
		.in_valid          (button_pio_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (button_pio_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (button_pio_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (button_pio_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (button_pio_s1_agent_rsp_fifo_out_data),          //  output,  width = 120,       out.data
		.out_valid         (button_pio_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (button_pio_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (button_pio_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (button_pio_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                          // (terminated),                         
		.csr_read          (1'b0),                                           // (terminated),                         
		.csr_write         (1'b0),                                           // (terminated),                         
		.csr_readdata      (),                                               // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated),                         
		.almost_full_data  (),                                               // (terminated),                         
		.almost_empty_data (),                                               // (terminated),                         
		.in_empty          (1'b0),                                           // (terminated),                         
		.out_empty         (),                                               // (terminated),                         
		.in_error          (1'b0),                                           // (terminated),                         
		.out_error         (),                                               // (terminated),                         
		.in_channel        (1'b0),                                           // (terminated),                         
		.out_channel       ()                                                // (terminated),                         
	);

	peripheral_subsys_altera_merlin_router_1921_crkks4a router (
		.sink_ready         (pb_cpu_0_m0_agent_cp_ready),                               //  output,    width = 1,      sink.ready
		.sink_valid         (pb_cpu_0_m0_agent_cp_valid),                               //   input,    width = 1,          .valid
		.sink_data          (pb_cpu_0_m0_agent_cp_data),                                //   input,  width = 119,          .data
		.sink_startofpacket (pb_cpu_0_m0_agent_cp_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (pb_cpu_0_m0_agent_cp_endofpacket),                         //   input,    width = 1,          .endofpacket
		.clk                (periph_clk_out_clk_clk),                                   //   input,    width = 1,       clk.clk
		.reset              (pb_cpu_0_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                          //  output,  width = 119,          .data
		.src_channel        (router_src_channel),                                       //  output,    width = 6,          .channel
		.src_startofpacket  (router_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	peripheral_subsys_altera_merlin_router_1921_nlkztfq router_001 (
		.sink_ready         (ssgdma_0_host_csr_agent_write_rp_ready),                   //  output,    width = 1,      sink.ready
		.sink_valid         (ssgdma_0_host_csr_agent_write_rp_valid),                   //   input,    width = 1,          .valid
		.sink_data          (ssgdma_0_host_csr_agent_write_rp_data),                    //   input,  width = 119,          .data
		.sink_startofpacket (ssgdma_0_host_csr_agent_write_rp_startofpacket),           //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ssgdma_0_host_csr_agent_write_rp_endofpacket),             //   input,    width = 1,          .endofpacket
		.clk                (periph_clk_out_clk_clk),                                   //   input,    width = 1,       clk.clk
		.reset              (pb_cpu_0_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                     //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                     //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                      //  output,  width = 119,          .data
		.src_channel        (router_001_src_channel),                                   //  output,    width = 6,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                //  output,    width = 1,          .endofpacket
	);

	peripheral_subsys_altera_merlin_router_1921_nlkztfq router_002 (
		.sink_ready         (ssgdma_0_host_csr_agent_read_rp_ready),                    //  output,    width = 1,      sink.ready
		.sink_valid         (ssgdma_0_host_csr_agent_read_rp_valid),                    //   input,    width = 1,          .valid
		.sink_data          (ssgdma_0_host_csr_agent_read_rp_data),                     //   input,  width = 119,          .data
		.sink_startofpacket (ssgdma_0_host_csr_agent_read_rp_startofpacket),            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ssgdma_0_host_csr_agent_read_rp_endofpacket),              //   input,    width = 1,          .endofpacket
		.clk                (periph_clk_out_clk_clk),                                   //   input,    width = 1,       clk.clk
		.reset              (pb_cpu_0_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                     //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                     //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                      //  output,  width = 119,          .data
		.src_channel        (router_002_src_channel),                                   //  output,    width = 6,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                //  output,    width = 1,          .endofpacket
	);

	peripheral_subsys_altera_merlin_router_1921_nlkztfq router_003 (
		.sink_ready         (sysid_control_slave_agent_rp_ready),                       //  output,    width = 1,      sink.ready
		.sink_valid         (sysid_control_slave_agent_rp_valid),                       //   input,    width = 1,          .valid
		.sink_data          (sysid_control_slave_agent_rp_data),                        //   input,  width = 119,          .data
		.sink_startofpacket (sysid_control_slave_agent_rp_startofpacket),               //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (sysid_control_slave_agent_rp_endofpacket),                 //   input,    width = 1,          .endofpacket
		.clk                (periph_clk_out_clk_clk),                                   //   input,    width = 1,       clk.clk
		.reset              (pb_cpu_0_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_003_src_ready),                                     //   input,    width = 1,       src.ready
		.src_valid          (router_003_src_valid),                                     //  output,    width = 1,          .valid
		.src_data           (router_003_src_data),                                      //  output,  width = 119,          .data
		.src_channel        (router_003_src_channel),                                   //  output,    width = 6,          .channel
		.src_startofpacket  (router_003_src_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                //  output,    width = 1,          .endofpacket
	);

	peripheral_subsys_altera_merlin_router_1921_nlkztfq router_004 (
		.sink_ready         (led_pio_s1_agent_rp_ready),                                //  output,    width = 1,      sink.ready
		.sink_valid         (led_pio_s1_agent_rp_valid),                                //   input,    width = 1,          .valid
		.sink_data          (led_pio_s1_agent_rp_data),                                 //   input,  width = 119,          .data
		.sink_startofpacket (led_pio_s1_agent_rp_startofpacket),                        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (led_pio_s1_agent_rp_endofpacket),                          //   input,    width = 1,          .endofpacket
		.clk                (periph_clk_out_clk_clk),                                   //   input,    width = 1,       clk.clk
		.reset              (pb_cpu_0_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_004_src_ready),                                     //   input,    width = 1,       src.ready
		.src_valid          (router_004_src_valid),                                     //  output,    width = 1,          .valid
		.src_data           (router_004_src_data),                                      //  output,  width = 119,          .data
		.src_channel        (router_004_src_channel),                                   //  output,    width = 6,          .channel
		.src_startofpacket  (router_004_src_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                //  output,    width = 1,          .endofpacket
	);

	peripheral_subsys_altera_merlin_router_1921_nlkztfq router_005 (
		.sink_ready         (dipsw_pio_s1_agent_rp_ready),                              //  output,    width = 1,      sink.ready
		.sink_valid         (dipsw_pio_s1_agent_rp_valid),                              //   input,    width = 1,          .valid
		.sink_data          (dipsw_pio_s1_agent_rp_data),                               //   input,  width = 119,          .data
		.sink_startofpacket (dipsw_pio_s1_agent_rp_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (dipsw_pio_s1_agent_rp_endofpacket),                        //   input,    width = 1,          .endofpacket
		.clk                (periph_clk_out_clk_clk),                                   //   input,    width = 1,       clk.clk
		.reset              (pb_cpu_0_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_005_src_ready),                                     //   input,    width = 1,       src.ready
		.src_valid          (router_005_src_valid),                                     //  output,    width = 1,          .valid
		.src_data           (router_005_src_data),                                      //  output,  width = 119,          .data
		.src_channel        (router_005_src_channel),                                   //  output,    width = 6,          .channel
		.src_startofpacket  (router_005_src_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                                //  output,    width = 1,          .endofpacket
	);

	peripheral_subsys_altera_merlin_router_1921_nlkztfq router_006 (
		.sink_ready         (button_pio_s1_agent_rp_ready),                             //  output,    width = 1,      sink.ready
		.sink_valid         (button_pio_s1_agent_rp_valid),                             //   input,    width = 1,          .valid
		.sink_data          (button_pio_s1_agent_rp_data),                              //   input,  width = 119,          .data
		.sink_startofpacket (button_pio_s1_agent_rp_startofpacket),                     //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (button_pio_s1_agent_rp_endofpacket),                       //   input,    width = 1,          .endofpacket
		.clk                (periph_clk_out_clk_clk),                                   //   input,    width = 1,       clk.clk
		.reset              (pb_cpu_0_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_006_src_ready),                                     //   input,    width = 1,       src.ready
		.src_valid          (router_006_src_valid),                                     //  output,    width = 1,          .valid
		.src_data           (router_006_src_data),                                      //  output,  width = 119,          .data
		.src_channel        (router_006_src_channel),                                   //  output,    width = 6,          .channel
		.src_startofpacket  (router_006_src_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                //  output,    width = 1,          .endofpacket
	);

	peripheral_subsys_altera_merlin_traffic_limiter_1921_js7yfey #(
		.SYNC_RESET                           (1),
		.PKT_DEST_ID_H                        (83),
		.PKT_DEST_ID_L                        (81),
		.PKT_SRC_ID_H                         (80),
		.PKT_SRC_ID_L                         (78),
		.PKT_BYTE_CNT_H                       (67),
		.PKT_BYTE_CNT_L                       (65),
		.PKT_BYTEEN_H                         (35),
		.PKT_BYTEEN_L                         (32),
		.PKT_TRANS_POSTED                     (60),
		.PKT_TRANS_WRITE                      (61),
		.PKT_TRANS_SEQ_H                      (118),
		.PKT_TRANS_SEQ_L                      (112),
		.MAX_OUTSTANDING_RESPONSES            (2),
		.PIPELINED                            (0),
		.ST_DATA_W                            (119),
		.ST_CHANNEL_W                         (6),
		.VALID_WIDTH                          (6),
		.ENFORCE_ORDER                        (1),
		.PREVENT_HAZARDS                      (1),
		.SUPPORTS_POSTED_WRITES               (1),
		.SUPPORTS_NONPOSTED_WRITES            (0),
		.REORDER                              (0),
		.ENABLE_CONCURRENT_SUBORDINATE_ACCESS (0),
		.NO_REPEATED_IDS_BETWEEN_SUBORDINATES (0),
		.ENABLE_OOO                           (0)
	) pb_cpu_0_m0_limiter (
		.clk                    (periph_clk_out_clk_clk),                                   //   input,    width = 1,       clk.clk
		.reset                  (pb_cpu_0_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                         //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                         //   input,    width = 1,          .valid
		.cmd_sink_data          (router_src_data),                                          //   input,  width = 119,          .data
		.cmd_sink_channel       (router_src_channel),                                       //   input,    width = 6,          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                   //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (pb_cpu_0_m0_limiter_cmd_src_ready),                        //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (pb_cpu_0_m0_limiter_cmd_src_data),                         //  output,  width = 119,          .data
		.cmd_src_channel        (pb_cpu_0_m0_limiter_cmd_src_channel),                      //  output,    width = 6,          .channel
		.cmd_src_startofpacket  (pb_cpu_0_m0_limiter_cmd_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (pb_cpu_0_m0_limiter_cmd_src_endofpacket),                  //  output,    width = 1,          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                        //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                        //   input,    width = 1,          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                      //   input,    width = 6,          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                         //   input,  width = 119,          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (pb_cpu_0_m0_limiter_rsp_src_ready),                        //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (pb_cpu_0_m0_limiter_rsp_src_valid),                        //  output,    width = 1,          .valid
		.rsp_src_data           (pb_cpu_0_m0_limiter_rsp_src_data),                         //  output,  width = 119,          .data
		.rsp_src_channel        (pb_cpu_0_m0_limiter_rsp_src_channel),                      //  output,    width = 6,          .channel
		.rsp_src_startofpacket  (pb_cpu_0_m0_limiter_rsp_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (pb_cpu_0_m0_limiter_rsp_src_endofpacket),                  //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (pb_cpu_0_m0_limiter_cmd_valid_data)                        //  output,    width = 6, cmd_valid.data
	);

	peripheral_subsys_altera_merlin_demultiplexer_1921_qgb6lga cmd_demux (
		.clk                (periph_clk_out_clk_clk),                                   //   input,    width = 1,        clk.clk
		.reset              (pb_cpu_0_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  clk_reset.reset
		.sink_ready         (pb_cpu_0_m0_limiter_cmd_src_ready),                        //  output,    width = 1,       sink.ready
		.sink_channel       (pb_cpu_0_m0_limiter_cmd_src_channel),                      //   input,    width = 6,           .channel
		.sink_data          (pb_cpu_0_m0_limiter_cmd_src_data),                         //   input,  width = 119,           .data
		.sink_startofpacket (pb_cpu_0_m0_limiter_cmd_src_startofpacket),                //   input,    width = 1,           .startofpacket
		.sink_endofpacket   (pb_cpu_0_m0_limiter_cmd_src_endofpacket),                  //   input,    width = 1,           .endofpacket
		.sink_valid         (pb_cpu_0_m0_limiter_cmd_valid_data),                       //   input,    width = 6, sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                     //   input,    width = 1,       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                     //  output,    width = 1,           .valid
		.src0_data          (cmd_demux_src0_data),                                      //  output,  width = 119,           .data
		.src0_channel       (cmd_demux_src0_channel),                                   //  output,    width = 6,           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                             //  output,    width = 1,           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                               //  output,    width = 1,           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                     //   input,    width = 1,       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                     //  output,    width = 1,           .valid
		.src1_data          (cmd_demux_src1_data),                                      //  output,  width = 119,           .data
		.src1_channel       (cmd_demux_src1_channel),                                   //  output,    width = 6,           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                             //  output,    width = 1,           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                               //  output,    width = 1,           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                     //   input,    width = 1,       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                     //  output,    width = 1,           .valid
		.src2_data          (cmd_demux_src2_data),                                      //  output,  width = 119,           .data
		.src2_channel       (cmd_demux_src2_channel),                                   //  output,    width = 6,           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                             //  output,    width = 1,           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                               //  output,    width = 1,           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                     //   input,    width = 1,       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                     //  output,    width = 1,           .valid
		.src3_data          (cmd_demux_src3_data),                                      //  output,  width = 119,           .data
		.src3_channel       (cmd_demux_src3_channel),                                   //  output,    width = 6,           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                             //  output,    width = 1,           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                               //  output,    width = 1,           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                                     //   input,    width = 1,       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                                     //  output,    width = 1,           .valid
		.src4_data          (cmd_demux_src4_data),                                      //  output,  width = 119,           .data
		.src4_channel       (cmd_demux_src4_channel),                                   //  output,    width = 6,           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                             //  output,    width = 1,           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                               //  output,    width = 1,           .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                                     //   input,    width = 1,       src5.ready
		.src5_valid         (cmd_demux_src5_valid),                                     //  output,    width = 1,           .valid
		.src5_data          (cmd_demux_src5_data),                                      //  output,  width = 119,           .data
		.src5_channel       (cmd_demux_src5_channel),                                   //  output,    width = 6,           .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                             //  output,    width = 1,           .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket)                                //  output,    width = 1,           .endofpacket
	);

	peripheral_subsys_altera_merlin_multiplexer_1922_3vkukdy cmd_mux (
		.clk                 (periph_clk_out_clk_clk),                                   //   input,    width = 1,       clk.clk
		.reset               (pb_cpu_0_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                        //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                        //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                         //  output,  width = 119,          .data
		.src_channel         (cmd_mux_src_channel),                                      //  output,    width = 6,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                     //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                     //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                   //   input,    width = 6,          .channel
		.sink0_data          (cmd_demux_src0_data),                                      //   input,  width = 119,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                                //   input,    width = 1,          .endofpacket
	);

	peripheral_subsys_altera_merlin_multiplexer_1922_3vkukdy cmd_mux_001 (
		.clk                 (periph_clk_out_clk_clk),                                   //   input,    width = 1,       clk.clk
		.reset               (pb_cpu_0_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                    //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                    //  output,    width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                                     //  output,  width = 119,          .data
		.src_channel         (cmd_mux_001_src_channel),                                  //  output,    width = 6,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                            //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                              //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                     //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                     //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                   //   input,    width = 6,          .channel
		.sink0_data          (cmd_demux_src1_data),                                      //   input,  width = 119,          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                                //   input,    width = 1,          .endofpacket
	);

	peripheral_subsys_altera_merlin_multiplexer_1922_3vkukdy cmd_mux_002 (
		.clk                 (periph_clk_out_clk_clk),                                   //   input,    width = 1,       clk.clk
		.reset               (pb_cpu_0_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                    //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                    //  output,    width = 1,          .valid
		.src_data            (cmd_mux_002_src_data),                                     //  output,  width = 119,          .data
		.src_channel         (cmd_mux_002_src_channel),                                  //  output,    width = 6,          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                            //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                              //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                                     //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                                     //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src2_channel),                                   //   input,    width = 6,          .channel
		.sink0_data          (cmd_demux_src2_data),                                      //   input,  width = 119,          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                                //   input,    width = 1,          .endofpacket
	);

	peripheral_subsys_altera_merlin_multiplexer_1922_3vkukdy cmd_mux_003 (
		.clk                 (periph_clk_out_clk_clk),                                   //   input,    width = 1,       clk.clk
		.reset               (pb_cpu_0_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                    //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                    //  output,    width = 1,          .valid
		.src_data            (cmd_mux_003_src_data),                                     //  output,  width = 119,          .data
		.src_channel         (cmd_mux_003_src_channel),                                  //  output,    width = 6,          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                            //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                              //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                                     //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                                     //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src3_channel),                                   //   input,    width = 6,          .channel
		.sink0_data          (cmd_demux_src3_data),                                      //   input,  width = 119,          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                                //   input,    width = 1,          .endofpacket
	);

	peripheral_subsys_altera_merlin_multiplexer_1922_3vkukdy cmd_mux_004 (
		.clk                 (periph_clk_out_clk_clk),                                   //   input,    width = 1,       clk.clk
		.reset               (pb_cpu_0_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                    //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                    //  output,    width = 1,          .valid
		.src_data            (cmd_mux_004_src_data),                                     //  output,  width = 119,          .data
		.src_channel         (cmd_mux_004_src_channel),                                  //  output,    width = 6,          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                            //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                              //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                                     //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                                     //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src4_channel),                                   //   input,    width = 6,          .channel
		.sink0_data          (cmd_demux_src4_data),                                      //   input,  width = 119,          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                                //   input,    width = 1,          .endofpacket
	);

	peripheral_subsys_altera_merlin_multiplexer_1922_3vkukdy cmd_mux_005 (
		.clk                 (periph_clk_out_clk_clk),                                   //   input,    width = 1,       clk.clk
		.reset               (pb_cpu_0_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                    //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                    //  output,    width = 1,          .valid
		.src_data            (cmd_mux_005_src_data),                                     //  output,  width = 119,          .data
		.src_channel         (cmd_mux_005_src_channel),                                  //  output,    width = 6,          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                            //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                              //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                                     //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                                     //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src5_channel),                                   //   input,    width = 6,          .channel
		.sink0_data          (cmd_demux_src5_data),                                      //   input,  width = 119,          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                                //   input,    width = 1,          .endofpacket
	);

	peripheral_subsys_altera_merlin_demultiplexer_1921_fg5nsva rsp_demux (
		.clk                (periph_clk_out_clk_clk),                                   //   input,    width = 1,       clk.clk
		.reset              (pb_cpu_0_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                                     //  output,    width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                                   //   input,    width = 6,          .channel
		.sink_data          (router_001_src_data),                                      //   input,  width = 119,          .data
		.sink_startofpacket (router_001_src_startofpacket),                             //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                               //   input,    width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                                     //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                     //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                     //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                      //  output,  width = 119,          .data
		.src0_channel       (rsp_demux_src0_channel),                                   //  output,    width = 6,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                //  output,    width = 1,          .endofpacket
	);

	peripheral_subsys_altera_merlin_demultiplexer_1921_fg5nsva rsp_demux_001 (
		.clk                (periph_clk_out_clk_clk),                                   //   input,    width = 1,       clk.clk
		.reset              (pb_cpu_0_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_002_src_ready),                                     //  output,    width = 1,      sink.ready
		.sink_channel       (router_002_src_channel),                                   //   input,    width = 6,          .channel
		.sink_data          (router_002_src_data),                                      //   input,  width = 119,          .data
		.sink_startofpacket (router_002_src_startofpacket),                             //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                               //   input,    width = 1,          .endofpacket
		.sink_valid         (router_002_src_valid),                                     //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                 //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                 //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                                  //  output,  width = 119,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                               //  output,    width = 6,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                            //  output,    width = 1,          .endofpacket
	);

	peripheral_subsys_altera_merlin_demultiplexer_1921_fg5nsva rsp_demux_002 (
		.clk                (periph_clk_out_clk_clk),                                   //   input,    width = 1,       clk.clk
		.reset              (pb_cpu_0_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_003_src_ready),                                     //  output,    width = 1,      sink.ready
		.sink_channel       (router_003_src_channel),                                   //   input,    width = 6,          .channel
		.sink_data          (router_003_src_data),                                      //   input,  width = 119,          .data
		.sink_startofpacket (router_003_src_startofpacket),                             //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                               //   input,    width = 1,          .endofpacket
		.sink_valid         (router_003_src_valid),                                     //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                 //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                 //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_002_src0_data),                                  //  output,  width = 119,          .data
		.src0_channel       (rsp_demux_002_src0_channel),                               //  output,    width = 6,          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                            //  output,    width = 1,          .endofpacket
	);

	peripheral_subsys_altera_merlin_demultiplexer_1921_fg5nsva rsp_demux_003 (
		.clk                (periph_clk_out_clk_clk),                                   //   input,    width = 1,       clk.clk
		.reset              (pb_cpu_0_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_004_src_ready),                                     //  output,    width = 1,      sink.ready
		.sink_channel       (router_004_src_channel),                                   //   input,    width = 6,          .channel
		.sink_data          (router_004_src_data),                                      //   input,  width = 119,          .data
		.sink_startofpacket (router_004_src_startofpacket),                             //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                               //   input,    width = 1,          .endofpacket
		.sink_valid         (router_004_src_valid),                                     //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                 //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                 //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_003_src0_data),                                  //  output,  width = 119,          .data
		.src0_channel       (rsp_demux_003_src0_channel),                               //  output,    width = 6,          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                            //  output,    width = 1,          .endofpacket
	);

	peripheral_subsys_altera_merlin_demultiplexer_1921_fg5nsva rsp_demux_004 (
		.clk                (periph_clk_out_clk_clk),                                   //   input,    width = 1,       clk.clk
		.reset              (pb_cpu_0_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_005_src_ready),                                     //  output,    width = 1,      sink.ready
		.sink_channel       (router_005_src_channel),                                   //   input,    width = 6,          .channel
		.sink_data          (router_005_src_data),                                      //   input,  width = 119,          .data
		.sink_startofpacket (router_005_src_startofpacket),                             //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                               //   input,    width = 1,          .endofpacket
		.sink_valid         (router_005_src_valid),                                     //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                                 //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                                 //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_004_src0_data),                                  //  output,  width = 119,          .data
		.src0_channel       (rsp_demux_004_src0_channel),                               //  output,    width = 6,          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                            //  output,    width = 1,          .endofpacket
	);

	peripheral_subsys_altera_merlin_demultiplexer_1921_fg5nsva rsp_demux_005 (
		.clk                (periph_clk_out_clk_clk),                                   //   input,    width = 1,       clk.clk
		.reset              (pb_cpu_0_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_006_src_ready),                                     //  output,    width = 1,      sink.ready
		.sink_channel       (router_006_src_channel),                                   //   input,    width = 6,          .channel
		.sink_data          (router_006_src_data),                                      //   input,  width = 119,          .data
		.sink_startofpacket (router_006_src_startofpacket),                             //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                               //   input,    width = 1,          .endofpacket
		.sink_valid         (router_006_src_valid),                                     //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                                 //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                                 //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_005_src0_data),                                  //  output,  width = 119,          .data
		.src0_channel       (rsp_demux_005_src0_channel),                               //  output,    width = 6,          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                            //  output,    width = 1,          .endofpacket
	);

	peripheral_subsys_altera_merlin_multiplexer_1922_ipyx2my rsp_mux (
		.clk                 (periph_clk_out_clk_clk),                                   //   input,    width = 1,       clk.clk
		.reset               (pb_cpu_0_m0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                        //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                        //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                         //  output,  width = 119,          .data
		.src_channel         (rsp_mux_src_channel),                                      //  output,    width = 6,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                     //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                     //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                   //   input,    width = 6,          .channel
		.sink0_data          (rsp_demux_src0_data),                                      //   input,  width = 119,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                               //   input,    width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                 //  output,    width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                 //   input,    width = 1,          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                               //   input,    width = 6,          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                  //   input,  width = 119,          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                           //   input,    width = 1,          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                                 //  output,    width = 1,     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                                 //   input,    width = 1,          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                               //   input,    width = 6,          .channel
		.sink2_data          (rsp_demux_002_src0_data),                                  //   input,  width = 119,          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                           //   input,    width = 1,          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                                 //  output,    width = 1,     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                                 //   input,    width = 1,          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                               //   input,    width = 6,          .channel
		.sink3_data          (rsp_demux_003_src0_data),                                  //   input,  width = 119,          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),                           //   input,    width = 1,          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                                 //  output,    width = 1,     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                                 //   input,    width = 1,          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                               //   input,    width = 6,          .channel
		.sink4_data          (rsp_demux_004_src0_data),                                  //   input,  width = 119,          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket),                           //   input,    width = 1,          .endofpacket
		.sink5_ready         (rsp_demux_005_src0_ready),                                 //  output,    width = 1,     sink5.ready
		.sink5_valid         (rsp_demux_005_src0_valid),                                 //   input,    width = 1,          .valid
		.sink5_channel       (rsp_demux_005_src0_channel),                               //   input,    width = 6,          .channel
		.sink5_data          (rsp_demux_005_src0_data),                                  //   input,  width = 119,          .data
		.sink5_startofpacket (rsp_demux_005_src0_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src0_endofpacket)                            //   input,    width = 1,          .endofpacket
	);

endmodule
